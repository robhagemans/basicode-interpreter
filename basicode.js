"use strict";
/*jshint maxerr: 10000 */

///////////////////////////////////////////////////////////////////////////////
// BASICODE interpreter
// Copyright (c) 2016, 2017 Rob Hagemans
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// For a similar interpreter see https://github.com/MarquisdeGeek/basicode
// which is (c) 2012 by Steven Goodwin and licensed under the GPL
//
// I'd like to acknowledge Steven's interpreter as a source of inspiration.
// However, this interpreter does not include code from his.


///////////////////////////////////////////////////////////////////////////////
// compatibility/polyfills

// Web Audio API
// Safari still only has the experimental version of the Web Audio API
// not sure if we're not breaking Safari elsewhere, though
window.AudioContext = window.AudioContext || window.webkitAudioContext;

// String repeat method
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
if (!String.prototype.repeat) {
  String.prototype.repeat = function(count) {
    if (this === null) {
      throw new TypeError("can\"t convert " + this + " to object");
    }
    var str = "" + this;
    count = +count;
    if (count != count) {
      count = 0;
    }
    if (count < 0) {
      throw new RangeError("repeat count must be non-negative");
    }
    if (count == Infinity) {
      throw new RangeError("repeat count must be less than infinity");
    }
    count = Math.floor(count);
    if (str.length === 0 || count === 0) {
      return "";
    }
    // Ensuring count is a 31-bit integer allows us to heavily optimize the
    // main part. But anyway, most current (August 2014) browsers can't handle
    // strings 1 << 28 chars or longer, so:
    if (str.length * count >= 1 << 28) {
      throw new RangeError("repeat count must not overflow maximum string size");
    }
    var rpt = "";
    for (;;) {
      if ((count & 1) == 1) {
        rpt += str;
      }
      count >>>= 1;
      if (count === 0) {
        break;
      }
      str += str;
    }
    return rpt;
  };
}


///////////////////////////////////////////////////////////////////////////////
// errors

function BasicError(message, detail, location)
{
    this.message = message;
    this.detail = detail;
    this.where = location;
    // capture stack trace, see http://stackoverflow.com/questions/464359/custom-exceptions-in-javascript
    if ("captureStackTrace" in Error) {
        Error.captureStackTrace(this, BasicError);
    }
    else {
        this.stack = (new Error()).stack;
    }
}

BasicError.prototype = Object.create(Error.prototype);
BasicError.prototype.name = "BasicError";
BasicError.prototype.constructor = BasicError;


///////////////////////////////////////////////////////////////////////////////
// bitfonts

var FONTS = {

    "tiny": {
        "width": 4,
        "height": 6,
        "glyphs": [
            "000000000000", "040404000400", "0A0A00000000", "0A0E0A0E0A00",
            "040608020C04", "0C0C00060600", "0C0A0C0A0600", "040400000000",
            "020404040200", "040202020400", "040E040E0400", "00040E040000",
            "000000000204", "00000E000000", "000000000400", "020204040808",
            "040A0E0A0400", "040C04040E00", "040A02040E00", "0C0204020C00",
            "060A0E020200", "0E080C020C00", "06080C0A0400", "0E0204040400",
            "040A040A0400", "040A06020C00", "000004000400", "000004000408",
            "000002040200", "00000E000E00", "000002010200", "0C0204000400",

            "06080E0E0600", "040A0E0A0A00", "0C0A0C0A0C00", "060808080600",
            "0C0A0A0A0C00", "0E080C080E00", "0E080C080800", "06080A0A0400",
            "0A0A0E0A0A00", "040404040400", "020202020C00", "0A0A0C0A0A00",
            "080808080E00", "0A0E0A0A0A00", "0A0E0E0E0A00", "040A0A0A0400",
            "0C0A0C080800", "040A0A0E0600", "0C0A0C0A0A00", "060804020C00",
            "0E0404040400", "0A0A0A0A0600", "0A0A0A040400", "0A0A0A0E0A00",
            "0A0A040A0A00", "0A0A04040400", "0E0204080E00", "060404040600",
            "080804040202", "060202020600", "040A00000000", "00000000000F",

            "040200000000", "00060A0A0600", "080C0A0A0C00", "000608080600",
            "02060A0A0600", "00040A0C0600", "06080C080800", "00040A0A060C",
            "080C0A0A0A00", "040004040400", "040004040408", "080A0C0A0A00",
            "040404040200", "00060E0A0A00", "000C0A0A0A00", "00040A0A0400",
            "000C0A0A0C08", "00060A0A0602", "000608080800", "000608020C00",
            "080C08080600", "000A0A0A0600", "000A0A0A0400", "000A0A0E0A00",
            "000A040A0A00", "000A0A0A0602", "000E02080E00", "06040C040600",
            "040404040400", "0C0406040C00", "000608000000", "000000000000",
        ]
    },
    // https://damieng.com/blog/2011/02/20/typography-in-8-bits-system-fonts
    "msx": {
        "width": 7,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "1010101000001000", "2828280000000000", "28287c287c282800", "103c503814781000",
            "60640810204c0c00", "20502054484c3000", "0408100000000000", "0810202020100800",
            "2010080808102000", "1054381038541000", "0010107c10100000", "0000000000101020",
            "0000007c00000000", "0000000000181800", "0000040810204000", "38444c5464443800",
            "1030501010107c00", "3844040830407c00", "3844041804443800", "081828487c080800",
            "7c40700804087000", "1820407844443800", "7c44081010101000", "3844443844443800",
            "3844443c04083000", "0000100000100000", "0000100000101020", "0c18306030180c00",

            "00007c007c000000", "6030180c18306000", "3844040810001000", "3844043454543800",
            "102844447c444400", "7824243824247800", "1824404040241800", "7028242424287000",
            "7c40407840407c00", "7c40407840404000", "3844405c44443800", "4444447c44444400",
            "3810101010103800", "1c08080848483000", "4448506050484400", "4040404040407c00",
            "446c545444444400", "446464544c4c4400", "3844444444443800", "7844447840404000",
            "3844444454483400", "7844447850484400", "3844403804443800", "7c10101010101000",
            "4444444444443800", "4444444428281000", "44444454546c4400", "4444281028444400",
            "4444443810101000", "7c04081020407c00", "3820202020203800", "0000402010080400",

            "3808080808083800", "1028440000000000", "0000000000007c00", "2010080000000000",
            "000038043c443c00", "4040586444645800", "0000384440443800", "0404344c444c3400",
            "000038447c403800", "0814107c10101000", "0000344c4c340438", "4040784444444400",
            "1000301010103800", "0800180808084830", "4040485060504800", "3010101010103800",
            "0000685454545400", "0000586444444400", "0000384444443800", "0000586464584040",
            "0000344c4c340404", "0000586440404000", "00003c4078047800", "2020782020241800",
            "0000484848483400", "0000444444281000", "0000444454542800", "0000442810284400",
            "000044444c340438", "00007c0810207c00", "0c10102010100c00", "1010100010101000",
            "6010100810106000", "2054080000000000", "0000000000000000", "0000000000000000",
        ]
    },
    // https://damieng.com/blog/2011/02/20/typography-in-8-bits-system-fonts
    "apple": {
        "width": 7,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "0808080808000800", "1414140000000000", "14143e143e141400", "081e281c0a3c0800",
            "3032040810260600", "102828102a241a00", "0808080000000000", "0810202020100800",
            "0804020202040800", "082a1c081c2a0800", "0008083e08080000", "0000000008081000",
            "0000003e00000000", "0000000000000800", "0002040810200000", "1c22262a32221c00",
            "0818080808081c00", "1c22020c10203e00", "3e02040c02221c00", "040c14243e040400",
            "3e203c0202221c00", "0e10203c22221c00", "3e02040810101000", "1c22221c22221c00",
            "1c22221e02043800", "0000080008000000", "0000080008081000", "0408102010080400",
            "00003e003e000000", "1008040204081000", "1c22040808000800", "1c222a2e2c201e00",

            "081422223e222200", "3c22223c22223c00", "1c22202020221c00", "3c22222222223c00",
            "3e20203c20203e00", "3e20203c20202000", "1e20202026221e00", "2222223e22222200",
            "1c08080808081c00", "0202020202221c00", "2224283028242200", "2020202020203e00",
            "22362a2a22222200", "2222322a26222200", "1c22222222221c00", "3c22223c20202000",
            "1c2222222a241a00", "3c22223c28242200", "1c22201c02221c00", "3e08080808080800",
            "2222222222221c00", "2222222222140800", "2222222a2a362200", "2222140814222200",
            "2222140808080800", "3e02040810203e00", "3e30303030303e00", "0020100804020000",
            "3e06060606063e00", "0000081422000000", "000000000000007f", "1008040000000000",

            "00001c021e221e00", "20203c2222223c00", "00001e2020201e00", "02021e2222221e00",
            "00001c223e201e00", "0c12103c10101000", "00001c22221e021c", "20203c2222222200",
            "0800180808081c00", "04000c0404042418", "2020222438242200", "1808080808081c00",
            "0000362a2a2a2200", "00003c2222222200", "00001c2222221c00", "00003c22223c2020",
            "00001e22221e0202", "00002e3020202000", "00001e201c023c00", "10103c1010120c00",
            "0000222222261a00", "0000222222140800", "000022222a2a3600", "0000221408142200",
            "00002222221e021c", "00003e0408103e00", "0e18183018180e00", "0808080808080808",
            "380c0c060c0c3800", "1a2c000000000000", "002a142a142a0000", "0000000000000000"
        ]
    },
    "cga": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "3078783030003000", "6C6C6C0000000000", "6C6CFE6CFE6C6C00",
            "307CC0780CF83000", "00C6CC183066C600", "386C3876DCCC7600", "6060C00000000000",
            "1830606060301800", "6030181818306000", "00663CFF3C660000", "003030FC30300000",
            "0000000000303060", "000000FC00000000", "0000000000303000", "060C183060C08000",
            "7CC6CEDEF6E67C00", "307030303030FC00", "78CC0C3860CCFC00", "78CC0C380CCC7800",
            "1C3C6CCCFE0C1E00", "FCC0F80C0CCC7800", "3860C0F8CCCC7800", "FCCC0C1830303000",
            "78CCCC78CCCC7800", "78CCCC7C0C187000", "0030300000303000", "0030300000303060",
            "183060C060301800", "0000FC0000FC0000", "6030180C18306000", "78CC0C1830003000",

            "7CC6DEDEDEC07800", "3078CCCCFCCCCC00", "FC66667C6666FC00", "3C66C0C0C0663C00",
            "F86C6666666CF800", "FE6268786862FE00", "FE6268786860F000", "3C66C0C0CE663E00",
            "CCCCCCFCCCCCCC00", "7830303030307800", "1E0C0C0CCCCC7800", "E6666C786C66E600",
            "F06060606266FE00", "C6EEFEFED6C6C600", "C6E6F6DECEC6C600", "386CC6C6C66C3800",
            "FC66667C6060F000", "78CCCCCCDC781C00", "FC66667C6C66E600", "78CC603018CC7800",
            "FCB4303030307800", "CCCCCCCCCCCCFC00", "CCCCCCCCCC783000", "C6C6C6D6FEEEC600",
            "C6C66C38386CC600", "CCCCCC7830307800", "FEC68C183266FE00", "7860606060607800",
            "C06030180C060200", "7818181818187800", "10386CC600000000", "00000000000000FF",

            "3030180000000000", "0000780C7CCC7600", "E060607C6666DC00", "000078CCC0CC7800",
            "1C0C0C7CCCCC7600", "000078CCFCC07800", "386C60F06060F000", "000076CCCC7C0CF8",
            "E0606C766666E600", "3000703030307800", "0C000C0C0CCCCC78", "E060666C786CE600",
            "7030303030307800", "0000CCFEFED6C600", "0000F8CCCCCCCC00", "000078CCCCCC7800",
            "0000DC66667C60F0", "000076CCCC7C0C1E", "0000DC766660F000", "00007CC0780CF800",
            "10307C3030341800", "0000CCCCCCCC7600", "0000CCCCCC783000", "0000C6D6FEFE6C00",
            "0000C66C386CC600", "0000CCCCCC7C0CF8", "0000FC983064FC00", "1C3030E030301C00",
            "1818180018181800", "E030301C3030E000", "76DC000000000000",
        ]
    },
    "thin": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "1038381010001000", "2424240000000000", "24247E247E242400",
            "183E403C027C1800", "0062640810264600", "3048305688887600", "1010200000000000",
            "1020404040201000", "2010080808102000", "004438FE38440000", "0010107C10100000",
            "0000000000101020", "0000007E00000000", "0000000000101000", "0002040810204000",
            "3C42464A52623C00", "1030501010107C00", "3C42020C30427E00", "3C42021C02423C00",
            "08182848FE081C00", "7E407C0202423C00", "1C20407C42423C00", "7E42040810101000",
            "3C42423C42423C00", "3C42423E02043800", "0010100000101000", "0010100000101020",
            "0810204020100800", "00007E00007E0000", "1008040204081000", "3C42020408000800",

            "3C425E525E403C00", "182442427E424200", "7C22223C22227C00", "1C22404040221C00",
            "7824222222247800", "7E22283828227E00", "7E22283828207000", "1C2240404E221E00",
            "4242427E42424200", "3810101010103800", "0E04040444443800", "6224283028246300",
            "7020202020227E00", "6355494141414100", "62524A4642424200", "1824424242241800",
            "7C22223C20207000", "3C4242424A3C0300", "7C22223C28247200", "3C42403C02423C00",
            "7F49080808081C00", "4242424242423C00", "4141414122140800", "4141414949493600",
            "4122140814224100", "4122140808081C00", "7F42040810217F00", "7840404040407800",
            "8040201008040200", "7808080808087800", "1028448200000000", "00000000000000FF",

            "1010080000000000", "00003C023E423F00", "6020202E31312E00", "00003C4240423C00",
            "0602023A46463B00", "00003C427E403C00", "0C12103810103800", "00003D42423E027C",
            "60202C3222226200", "1000301010103800", "020006020242423C", "6020242830282600",
            "3010101010103800", "0000764949494900", "00005C6242424200", "00003C4242423C00",
            "00006C32322C2070", "0000364C4C34040E", "00006C3222207000", "00003E403C027C00",
            "10107C1010120C00", "0000424242463A00", "0000414122140800", "0000414949493600",
            "0000442810284400", "00004242423E027C", "00007C0810207C00", "0C10106010100C00",
            "1010100010101000", "3008080608083000", "324C000000000000",
        ]
    },
    "pcjr": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "3078783030003000", "6C6C6C0000000000", "6C6CFE6CFE6C6C00",
            "307CC0780CF83000", "00C6CC183066C600", "386C3876DCCC7600", "6060C00000000000",
            "1830606060301800", "6030181818306000", "00663CFF3C660000", "003030FC30300000",
            "0000000000303060", "000000FC00000000", "0000000000303000", "060C183060C08000",
            "7CC6CEDEF6E67C00", "307030303030FC00", "78CC0C3860CCFC00", "78CC0C380CCC7800",
            "1C3C6CCCFE0C1E00", "FCC0F80C0CCC7800", "3860C0F8CCCC7800", "FCCC0C1830303000",
            "78CCCC78CCCC7800", "78CCCC7C0C187000", "0030300000303000", "0030300000303060",
            "183060C060301800", "0000FC0000FC0000", "6030180C18306000", "78CC0C1830003000",

            "7CC6DEDEDEC07800", "3078CCCCFCCCCC00", "FC66667C6666FC00", "3C66C0C0C0663C00",
            "F86C6666666CF800", "FE6268786862FE00", "FE6268786860F000", "3C66C0C0CE663E00",
            "CCCCCCFCCCCCCC00", "7830303030307800", "1E0C0C0CCCCC7800", "E6666C786C66E600",
            "F06060606266FE00", "C6EEFEFED6C6C600", "C6E6F6DECEC6C600", "386CC6C6C66C3800",
            "FC66667C6060F000", "78CCCCCCDC781C00", "FC66667C6C66E600", "78CCE0701CCC7800",
            "FCB4303030307800", "CCCCCCCCCCCCFC00", "CCCCCCCCCC783000", "C6C6C6D6FEEEC600",
            "C6C66C38386CC600", "CCCCCC7830307800", "FEC68C183266FE00", "7860606060607800",
            "C06030180C060200", "7818181818187800", "10386CC600000000", "00000000000000FF",

            "3030180000000000", "0000780C7CCC7600", "E060607C6666DC00", "000078CCC0CC7800",
            "1C0C0C7CCCCC7600", "000078CCFCC07800", "386C60F06060F000", "000076CCCC7C0CF8",
            "E0606C766666E600", "3000703030307800", "0C000C0C0CCCCC78", "E060666C786CE600",
            "7030303030307800", "0000CCFEFED6C600", "0000F8CCCCCCCC00", "000078CCCCCC7800",
            "0000DC66667C60F0", "000076CCCC7C0C1E", "0000DC766660F000", "00007CC0780CF800",
            "10307C3030341800", "0000CCCCCCCC7600", "0000CCCCCC783000", "0000C6D6FEFE6C00",
            "0000C66C386CC600", "0000CCCCCC7C0CF8", "0000FC983064FC00", "1C3030E030301C00",
            "1818180018181800", "E030301C3030E000", "76DC000000000000",
        ]
    },
    "tandy": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "183C3C1818001800", "3636360000000000", "36367F367F363600",
            "183E603C067C1800", "0063660C18336300", "1C361C3B6E663B00", "1818300000000000",
            "0C18303030180C00", "30180C0C0C183000", "00663CFF3C660000", "0018187E18180000",
            "0000000000181830", "0000007E00000000", "0000000000181800", "03060C183060C000",
            "3E63676F7B733E00", "1838181818187E00", "3C66061C30667E00", "3C66061C06663C00",
            "0E1E36667F060F00", "7E607C0606663C00", "1C30607C66663C00", "7E66060C18181800",
            "3C66663C66663C00", "3C66663E060C3800", "0018180000181800", "0018180000181830",
            "060C1830180C0600", "00007E007E000000", "30180C060C183000", "3C66060C18001800",

            "3E636F6F6F603C00", "1C3663637F636300", "7E33333E33337E00", "1E33606060331E00",
            "7C36333333367C00", "7F31343C34317F00", "7F31343C34307800", "1E33606067331F00",
            "6666667E66666600", "3C18181818183C00", "0F06060666663C00", "7333363C36337300",
            "7830303031337F00", "63777F7F6B636300", "63737B6F67636300", "3E63636363633E00",
            "7E33333E30307800", "3E636363636F3E03", "7E33333E36337300", "3C6670380E663C00",
            "7E5A181818183C00", "6363636363633E00", "66666666663C1800", "6363636B7F776300",
            "6363361C1C366300", "6666663C18183C00", "7F63460C19337F00", "3C30303030303C00",
            "6030180C06030100", "3C0C0C0C0C0C3C00", "081C360000000000", "00000000000000FF",

            "18180C0000000000", "00003C063E663B00", "70303E3333336E00", "00003C6660663C00",
            "0E063E6666663B00", "00003C667E603C00", "1C36307830307800", "00003B66663E067C",
            "7030363B33337300", "1800381818183C00", "06000E060666663C", "703033363C367300",
            "3818181818183C00", "0000E67F7F6B6300", "00006E3333333300", "00003C6666663C00",
            "00006E33333E3078", "00003B66663E060F", "00006E3B33307800", "00003E603C067C00",
            "10307C3030361C00", "0000666666663B00", "00006666663C1800", "0000636B7F7F3600",
            "000063361C366300", "00006666663E067C", "00007E4C18327E00", "0E18187018180E00",
            "1818180018181800", "7018180E18187000", "3B6E000000000000",
        ]
    },
    "tandy2": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "183C3C1818001800", "6666240000000000", "6C6CFE6CFE6C6C00",
            "183E603C067C1800", "00C6CC183066C600", "386C3876DCCC7600", "1818300000000000",
            "0C18303030180C00", "30180C0C0C183000", "00663CFF3C660000", "0018187E18180000",
            "0000000000181830", "0000007E00000000", "0000000000181800", "060C183060C08000",
            "386CC6D6C66C3800", "1838181818187E00", "7CC6061C3066FE00", "7CC6063C06C67C00",
            "1C3C6CCCFE0C1E00", "FEC0C0FC06C67C00", "3860C0FCC6C67C00", "FEC60C1830303000",
            "7CC6C67CC6C67C00", "7CC6C67E060C7800", "0018180000181800", "0018180000181830",
            "060C1830180C0600", "00007E00007E0000", "30180C060C183000", "7CC60C1818001800",

            "7CC6DEDEDEC07800", "386CC6FEC6C6C600", "FC66667C6666FC00", "3C66C0C0C0663C00",
            "F86C6666666CF800", "FE6268786862FE00", "FE6268786860F000", "3C66C0C0CE663A00",
            "C6C6C6FEC6C6C600", "3C18181818183C00", "1E0C0C0CCCCC7800", "E6666C786C66E600",
            "F06060606266FE00", "C6EEFEFED6C6C600", "C6E6F6DECEC6C600", "7CC6C6C6C6C67C00",
            "FC66667C6060F000", "7CC6C6C6C6CE7C0E", "FC6666786C66E600", "3C6630180C663C00",
            "7E5A181818183C00", "C6C6C6C6C6C67C00", "C6C6C6C6C66C3800", "C6C6C6D6D6FE6C00",
            "C6C66C386CC6C600", "6666663C18183C00", "FEC68C183266FE00", "3C30303030303C00",
            "C06030180C060200", "3C0C0C0C0C0C3C00", "10386CC600000000", "00000000000000FF",

            "30180C0000000000", "0000780C7CCC7600", "E0607C666666DC00", "00007CC6C0C67C00",
            "1C0C7CCCCCCC7600", "00007CC6FEC07C00", "3C6660F86060F000", "000076CCCC7C0CF8",
            "E0606C766666E600", "1800381818183C00", "060006060666663C", "E060666C786CE600",
            "3818181818183C00", "0000ECFED6D6D600", "0000DC6666666600", "00007CC6C6C67C00",
            "0000DC66667C60F0", "000076CCCC7C0C1E", "0000DC766060F000", "00007EC07C06FC00",
            "3030FC3030361C00", "0000CCCCCCCC7600", "0000C6C6C66C3800", "0000C6D6D6FE6C00",
            "0000C66C386CC600", "0000C6C6C67E06FC", "00007E4C18327E00", "0E18187018180E00",
            "1818181818181800", "7018180E18187000", "76DC000000000000",
        ]
    },
    // https://damieng.com/blog/2011/02/20/typography-in-8-bits-system-fonts
    "spectrum": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "0010101010001000", "0024240000000000", "00247e24247e2400", "00083e283e0a3e08",
            "0062640810264600", "001028102a443a00", "0008100000000000", "0004080808080400",
            "0020101010102000", "000014083e081400", "000008083e080800", "0000000000080810",
            "000000003e000000", "0000000000181800", "0000020408102000", "003c464a52623c00",
            "0018280808083e00", "003c42023c407e00", "003c420c02423c00", "00081828487e0800",
            "007e407c02423c00", "003c407c42423c00", "007e020408101000", "003c423c42423c00",
            "003c42423e023c00", "0000001000001000", "0000100000101020", "0000040810080400",
            "0000003e003e0000", "0000100804081000", "003c420408000800", "003c4a565e403c00",

            "003c42427e424200", "007c427c42427c00", "003c424040423c00", "0078444242447800",
            "007e407c40407e00", "007e407c40404000", "003c42404e423c00", "0042427e42424200",
            "003e080808083e00", "0002020242423c00", "0044487048444200", "0040404040407e00",
            "0042665a42424200", "004262524a464200", "003c424242423c00", "007c42427c404000",
            "003c4242524a3c00", "007c42427c444200", "003c403c02423c00", "00fe101010101000",
            "0042424242423c00", "0042424242241800", "00424242425a2400", "0042241818244200",
            "0082442810101000", "007e040810207e00", "000e080808080e00", "0000402010080400",
            "0070101010107000", "0010385410101000", "00000000000000ff", "001c227820207e00",

            "000038043c443c00", "0020203c22223c00", "00001c2020201c00", "0004043c44443c00",
            "0000384478403c00", "000c101810101000", "00003c44443c0438", "0040407844444400",
            "0010003010103800", "0004000404042418", "0020283030282400", "0010101010100c00",
            "0000685454545400", "0000784444444400", "0000384444443800", "0000784444784040",
            "00003c44443c0406", "00001c2020202000", "0000384038047800", "0010381010100c00",
            "0000444444443800", "0000444428281000", "0000445454542800", "0000442810284400",
            "00004444443c0438", "00007c0810207c00", "000e083008080e00", "0008080808080800",
            "0070100c10107000", "0014280000000000", "3c4299a1a199423c",
        ]
    },
    // https://damieng.com/blog/2011/02/20/typography-in-8-bits-system-fonts
    "c64": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "1818181800001800", "6666660000000000", "6666ff66ff666600", "183e603c067c1800",
            "62660c1830664600", "3c663c3867663f00", "060c180000000000", "0c18303030180c00",
            "30180c0c0c183000", "00663cff3c660000", "0018187e18180000", "0000000000181830",
            "0000007e00000000", "0000000000181800", "0003060c18306000", "3c666e7666663c00",
            "1818381818187e00", "3c66060c30607e00", "3c66061c06663c00", "060e1e667f060600",
            "7e607c0606663c00", "3c66607c66663c00", "7e660c1818181800", "3c66663c66663c00",
            "3c66663e06663c00", "0000180000180000", "0000180000181830", "0e18306030180e00",
            "00007e007e000000", "70180c060c187000", "3c66060c18001800", "3c666e6e60623c00",

            "183c667e66666600", "7c66667c66667c00", "3c66606060663c00", "786c6666666c7800",
            "7e60607860607e00", "7e60607860606000", "3c66606e66663c00", "6666667e66666600",
            "3c18181818183c00", "1e0c0c0c0c6c3800", "666c7870786c6600", "6060606060607e00",
            "63777f6b63636300", "66767e7e6e666600", "3c66666666663c00", "7c66667c60606000",
            "3c666666663c0e00", "7c66667c786c6600", "3c66603c06663c00", "7e18181818181800",
            "6666666666663c00", "66666666663c1800", "6363636b7f776300", "66663c183c666600",
            "6666663c18181800", "7e060c1830607e00", "181818ffff181818", "c0c03030c0c03030",
            "1818181818181818", "3333cccc3333cccc", "3399cc663399cc66", "0000000000000000",

            "00003c063e663e00", "0060607c66667c00", "00003c6060603c00", "0006063e66663e00",
            "00003c667e603c00", "000e183e18181800", "00003e66663e067c", "0060607c66666600",
            "0018003818183c00", "000600060606063c", "0060606c786c6600", "0038181818183c00",
            "0000667f7f6b6300", "00007c6666666600", "00003c6666663c00", "00007c66667c6060",
            "00003e66663e0606", "00007c6660606000", "00003e603c067c00", "00187e1818180e00",
            "0000666666663e00", "00006666663c1800", "0000636b7f3e3600", "0000663c183c6600",
            "00006666663e0c78", "00007e0c18307e00", "3c30303030303c00", "0c12307c3062fc00",
            "3c0c0c0c0c0c3c00", "00183c7e18181818", "0010307f7f301000", "000000ffff000000",
        ]
    },
    "vic": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "0808080800000800", "2424240000000000", "24247e247e242400", "081e281c0a3c0800",
            "0062640810264600", "304848304a443a00", "0408100000000000", "0408101010080400",
            "2010080808102000", "082a1c3e1c2a0800", "0008083e08080000", "0000000000080810",
            "0000007e00000000", "0000000000181800", "0002040810204000", "3c42465a62423c00",
            "0818280808083e00", "3c42020c30407e00", "3c42021c02423c00", "060a12227f020200",
            "7e40780402443800", "1c20407c42423c00", "7e42040810101000", "3c42423c42423c00",
            "3c42423e02043800", "0000080000080000", "0000080000080810", "0e18306030180e00",
            "00007e007e000000", "70180c060c187000", "3c42020c10001000", "0e11252b26100f00",
            "1824427e42424200", "7c22223c22227c00", "1c22404040221c00", "7824222222247800",
            "7e40407840407e00", "7e40407840404000", "1c22404e42221c00", "4242427e42424200",
            "1c08080808081c00", "0e04040404443800", "4244487048444200", "4040404040407e00",
            "42665a5a42424200", "4262524a46424200", "1824424242241800", "7c42427c40404000",
            "182442424a241a00", "7c42427c48444200", "3c42403c02423c00", "3e08080808080800",
            "4242424242423c00", "4242422424181800", "4242425a5a664200", "4242241824424200",
            "2222221c08080800", "7e02041820407e00", "3c20202020203c00", "0040201008040200",
            "3c04040404043c00", "0814220000000000", "00000000000000ff", "0608081e08383700",
            "000038043c443a00", "40405c6242625c00", "00003c4240423c00", "02023a4642463a00",
            "00003c427e403c00", "0c12107c10101000", "00003a46463a023c", "40405c6242424200",
            "0800180808081c00", "04000c0404042418", "0020222428342200", "1808080808081c00",
            "0000764949494100", "00005c6242424200", "00003c4242423c00", "00005c62625c4040",
            "00003a46463a0202", "00005c6240404000", "00003e403c027c00", "10107c1010120c00",
            "0000424242463a00", "0000424242241800", "0000414949493600", "0000422418244200",
            "00004242463a023c", "00007e0418207e00", "0608083008080600", "0808080808080800",
            "3008080608083000", "3149460000000000", "0000000000000000", "0000000000000000"
        ]
    },
    "atari": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "0018181818001800", "0066666600000000", "0066ff6666ff6600", "183e603c067c1800",
            "00666c1830664600", "1c361c386f663b00", "0018181800000000", "000e1c18181c0e00",
            "0070381818387000", "00663cff3c660000", "0018187e18180000", "0000000000181830",
            "0000007e00000000", "0000000000181800", "00060c1830604000", "003c666e76663c00",
            "0018381818187e00", "003c660c18307e00", "007e0c180c663c00", "000c1c3c6c7e0c00",
            "007e607c06663c00", "003c607c66663c00", "007e060c18303000", "003c663c66663c00",
            "003c663e060c3800", "0000181800181800", "0000181800181830", "060c1830180c0600",
            "00007e00007e0000", "6030180c18306000", "003c660c18001800", "003c666e6e603e00",
            "00183c66667e6600", "007c667c66667c00", "003c666060663c00", "00786c66666c7800",
            "007e607c60607e00", "007e607c60606000", "003e60606e663e00", "0066667e66666600",
            "007e181818187e00", "0006060606663c00", "00666c78786c6600", "0060606060607e00",
            "0063777f6b636300", "0066767e7e6e6600", "003c666666663c00", "007c66667c606000",
            "003c6666666c3600", "007c66667c6c6600", "003c603c06063c00", "007e181818181800",
            "0066666666667e00", "00666666663c1800", "0063636b7f776300", "0066663c3c666600",
            "0066663c18181800", "007e0c1830607e00", "001e181818181e00", "00406030180c0600",
            "0078181818187800", "00081c3663000000", "000000000000ff00", "00183c7e7e3c1800",
            "00003c063e663e00", "0060607c66667c00", "00003c6060603c00", "0006063e66663e00",
            "00003c667e603c00", "000e183e18181800", "00003e66663e067c", "0060607c66666600",
            "0018003818183c00", "000600060606063c", "0060606c786c6600", "0038181818183c00",
            "0000667f7f6b6300", "00007c6666666600", "00003c6666663c00", "00007c66667c6060",
            "00003e66663e0606", "00007c6660606000", "00003e603c067c00", "00187e1818180e00",
            "0000666666663e00", "00006666663c1800", "0000636b7f3e3600", "0000663c183c6600",
            "00006666663e0c78", "00007e0c18307e00", "00183c7e7e183c00", "1818181818181818",
            "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000"
        ]
    },
    "pcw": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "1818181818001800", "6c6c6c0000000000", "6c6cfe6cfe6c6c00", "183e583c1a7c1800",
            "00c6cc183066c600", "386c3876dccc7600", "1818180000000000", "0c18303030180c00",
            "30180c0c0c183000", "00663cff3c660000", "0018187e18180000", "0000000000181830",
            "0000007e00000000", "0000000000181800", "060c183060c08000", "386cced6e66c3800",
            "1838181818187e00", "3c66063c60667e00", "3c66061c06663c00", "1c3c6cccfe0c1e00",
            "7e62607c06663c00", "3c66607c66663c00", "7e66060c18181800", "3c66663c66663c00",
            "3c66663e06663c00", "0000181800181800", "0000181800181830", "0c18306030180c00",
            "00007e007e000000", "6030180c18306000", "3c66660c18001800", "7cc6dededec07c00",
            "183c66667e666600", "fc66667c6666fc00", "3c66c0c0c0663c00", "f86c6666666cf800",
            "fe6268786862fe00", "fe6268786860f000", "3c66c0c0ce663e00", "6666667e66666600",
            "7e18181818187e00", "1e0c0c0ccccc7800", "e6666c786c66e600", "f06060606266fe00",
            "c6eefefed6c6c600", "c6e6f6decec6c600", "7cc6c6c6c6c67c00", "fc66667c6060f000",
            "7cc6c6c6dacc7600", "fc66667c6c66e600", "3c66603c06663c00", "7e5a181818183c00",
            "6666666666663c00", "66666666663c1800", "c6c6c6d6feeec600", "c66c38386cc6c600",
            "6666663c18183c00", "fec68c183266fe00", "3c30303030303c00", "c06030180c060200",
            "3c0c0c0c0c0c3c00", "183c7e1818181800", "00000000000000ff", "30180c0000000000",
            "0000780c7ccc7600", "e0607c666666dc00", "00003c6660663c00", "1c0c7ccccccc7600",
            "00003c667e603c00", "1c36307830307800", "00003e66663e067c", "e0607c666666e600",
            "1800381818183c00", "06000e060666663c", "e060666c786ce600", "3818181818183c00",
            "00006cfed6d6c600", "0000dc6666666600", "00003c6666663c00", "0000dc66667c60f0",
            "000076cccc7c0c1e", "0000dc766060f000", "00003c603c067c00", "30307c3030361c00",
            "0000666666663e00", "00006666663c1800", "0000c6d6d6fe6c00", "0000c66c386cc600",
            "00006666663e067c", "00007e4c18327e00", "0e18187018180e00", "1818181818181800",
            "7018180e18187000", "76dc000000000000", "386cc6c6c66c3800", "00003c3c3c3c0000"
        ]
    },
    // https://damieng.com/blog/2011/02/20/typography-in-8-bits-system-fonts
    "bbc": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "1818181818001800", "6c6c6c0000000000", "36367f367f363600", "0c3f683e0b7e1800",
            "60660c1830660600", "386c6c386d663b00", "0c18300000000000", "0c18303030180c00",
            "30180c0c0c183000", "00187e3c7e180000", "0018187e18180000", "0000000000181830",
            "0000007e00000000", "0000000000181800", "00060c1830600000", "3c666e7e76663c00",
            "1838181818187e00", "3c66060c18307e00", "3c66061c06663c00", "0c1c3c6c7e0c0c00",
            "7e607c0606663c00", "1c30607c66663c00", "7e060c1830303000", "3c66663c66663c00",
            "3c66663e060c3800", "0000181800181800", "0000181800181830", "0c18306030180c00",
            "00007e007e000000", "30180c060c183000", "3c660c1818001800", "3c666e6a6e603c00",

            "3c66667e66666600", "7c66667c66667c00", "3c66606060663c00", "786c6666666c7800",
            "7e60607c60607e00", "7e60607c60606000", "3c66606e66663c00", "6666667e66666600",
            "7e18181818187e00", "3e0c0c0c0c6c3800", "666c7870786c6600", "6060606060607e00",
            "63777f6b6b636300", "6666767e6e666600", "3c66666666663c00", "7c66667c60606000",
            "3c6666666a6c3600", "7c66667c6c666600", "3c66603c06663c00", "7e18181818181800",
            "6666666666663c00", "66666666663c1800", "63636b6b7f776300", "66663c183c666600",
            "6666663c18181800", "7e060c1830607e00", "7c60606060607c00", "006030180c060000",
            "3e06060606063e00", "183c664200000000", "00000000000000ff", "1c36307c30307e00",

            "00003c063e663e00", "60607c6666667c00", "00003c6660663c00", "06063e6666663e00",
            "00003c667e603c00", "1c30307c30303000", "00003e66663e063c", "60607c6666666600",
            "1800381818183c00", "1800381818181870", "6060666c786c6600", "3818181818183c00",
            "0000367f6b6b6300", "00007c6666666600", "00003c6666663c00", "00007c66667c6060",
            "00003e66663e0607", "00006c7660606000", "00003e603c067c00", "30307c3030301c00",
            "0000666666663e00", "00006666663c1800", "0000636b6b7f3600", "0000663c183c6600",
            "00006666663e063c", "00007e0c18307e00", "0c18187018180c00", "1818180018181800",
            "3018180e18183000", "0000000000000000", "0000000000000000", "0000000000000000"
        ]
    },
    "cpc": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000",
            "0c0c0c0c0c000c00", "3636360000000000", "36367f367f363600", "0c1f2c1e0d3e0c00",
            "0063660c18336300", "1c361c3b6e663b00", "0c0c180000000000", "060c1818180c0600",
            "180c0606060c1800", "00331e7f1e330000", "000c0cbf0c0c0000", "00000000000c0c18",
            "0000003f00000000", "00000000000c0c00", "03060c1830604000", "3e63676b73633e00",
            "0c1c0c0c0c0c3f00", "1e33031e30333f00", "1e33030e03331e00", "0e1e36667f060f00",
            "3f31303e03331e00", "1e33303e33331e00", "3f3303060c0c0c00", "1e33331e33331e00",
            "1e33331f03331e00", "00000c0c000c0c00", "00000c0c000c0c18", "060c1830180c0600",
            "00003f00003f0000", "30180c060c183000", "1e3333060c000c00", "3e636f6f6f603e00",

            "0c1e33333f333300", "7e33333e33337e00", "1e33606060331e00", "7c36333333367c00",
            "7f31343c34317f00", "7f31343c34307800", "1e33606067331f00", "3333333f33333300",
            "3f0c0c0c0c0c3f00", "0f06060666663c00", "7333363c36337300", "7830303031337f00",
            "63777f7f6b636300", "63737b6f67636300", "1c36636363361c00", "7e33333e30307800",
            "1c3663636d663b00", "7e33333e36337300", "1e33301e03331e00", "3f2d0c0c0c0c1e00",
            "3333333333331e00", "33333333331e0c00", "6363636b7f776300", "63361c1c36636300",
            "3333331e0c0c1e00", "7f63460c19337f00", "1e18181818181e00", "6030180c06030100",
            "1e06060606061e00", "0c1e3f0c0c0c0c00", "000000000000007f", "180c060000000080",

            "00003c063e663b00", "70303e3333336e00", "00001e3330331e00", "0e063e6666663b00",
            "00001e333f301e00", "0e1b183c18183c00", "00001f33331f033e", "7030363b33337300",
            "0c001c0c0c0c1e00", "030007030333331e", "703033363c367300", "1c0c0c0c0c0c1e00",
            "0000367f6b6b6300", "00006e3333333300", "00001e3333331e00", "00006e33333e3078",
            "00003b66663e060f", "00006e3b30307800", "00001e301e033e00", "18183e18181b0e00",
            "0000333333331f00", "00003333331e0c00", "0000636b6b7f3600", "000063361c366300",
            "00003333331f033e", "00003f260c193f00", "070c0c380c0c0700", "0c0c0c0c0c0c0c00",
            "380c0c070c0c3800", "3b6e000000000000", "6619661966196619", "0080008000800080"
        ]
    },
    "genie1": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "1010101010001000", "2828280000000000", "28287c287c282800",
            "103c503814781000", "60640810204c0c00", "2050502458483400", "1010100000000000",
            "0810202020100800", "2010080808102000", "1054381038541000", "0010107c10100000",
            "0000000000101020", "0000007c00000000", "0000000000001000", "0004081020400000",
            "38444c5464443800", "1030101010101000", "3844043840407c00", "7c04081804443800",
            "081828487c080800", "7c40780404443800", "1c20407844443800", "7c04040810204000",
            "3844443844443800", "3844443c04087000", "0000001000100000", "0000001000101020",
            "0810204020100800", "00007c007c000000", "2010080408102000", "3844040810001000",

            "3844545c58403c00", "102844447c444400", "7844447844447800", "3844404040443800",
            "7844444444447800", "7c40407040407c00", "7c40407040404000", "3844405c44443800",
            "4444447c44444400", "3810101010103800", "7c04040404443800", "4448506050484400",
            "4040404040407c00", "446c545444444400", "4464544c44444400", "3844444444443800",
            "7844447840404000", "3844444454483400", "7844447850484400", "3844403804443800",
            "7c54101010101000", "4444444444443800", "4444442828101000", "4444445454542800",
            "4444281028444400", "4444281010101000", "7c44081020447c00", "7860606060607800",
            "0040201008040000", "3c0c0c0c0c0c3c00", "1028440000000000", "000000000000007c",

            "2010080000000000", "000038043c443c00", "4040784444447800", "0000384440443800",
            "04043c4444443c00", "000038447c403800", "1820702020202020", "00003c44443c0438",
            "4040784444444400", "1000301010103800", "0400040404042418", "4040485060504800",
            "3010101010103800", "0000685454545400", "0000784444444400", "0000384444443800",
            "0000784444784040", "00003c44443c0404", "0000586040404000", "00003c4038047800",
            "20207c2020201c00", "00004444444c3400", "0000444444281000", "0000444454542800",
            "0000442810284400", "00004444443c0438", "00007c0810207c00", "1820204020201800",
            "1010100010101000", "3008080408083000", "324c000000000000", "ffffffffffffffff",
        ]
    },
    "genie2": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "0018181818001800", "0066666600000000", "0066ff6666ff6600",
            "183e603c067c1800", "00666c1830664600", "1c361c386f663b00", "0018181800000000",
            "000e1c18181c0e00", "0070381818387000", "00663cff3c660000", "0018187e18180000",
            "0000000000181830", "0000007e00000000", "0000000000181800", "00060c1830604000",
            "003c666e76663c00", "0018381818187e00", "003c660c18307e00", "007e0c180c663c00",
            "000c1c3c6c7e0c00", "007e607c06663c00", "003c607c66663c00", "007e060c18303000",
            "003c663c66663c00", "003c663e060c3800", "0000181800181800", "0000181800181830",
            "060c1830180c0600", "00007e00007e0000", "6030180c18306000", "003c660c18001800",
            "003c666e6e603e00", "00183c66667e6600", "007c667c66667c00", "003c666060663c00",
            "00786c66666c7800", "007e607c60607e00", "007e607c60606000", "003e60606e663e00",
            "0066667e66666600", "007e181818187e00", "0006060606663c00", "00666c78786c6600",
            "0060606060607e00", "0063777f6b636300", "0066767e7e6e6600", "003c666666663c00",
            "007c66667c606000", "003c6666666c3600", "007c66667c6c6600", "003c603c06063c00",
            "007e181818181800", "0066666666667e00", "00666666663c1800", "0063636b7f776300",
            "0066663c3c666600", "0066663c18181800", "007e0c1830607e00", "001e181818181e00",
            "00406030180c0600", "0078181818187800", "00081c3663000000", "000000000000ff00",
            "0c18300000000000", "00003c063e663e00", "0060607c66667c00", "00003c6060603c00",
            "0006063e66663e00", "00003c667e603c00", "000e183e18181800", "00003e66663e067c",
            "0060607c66666600", "0018003818183c00", "000600060606063c", "0060606c786c6600",
            "0038181818183c00", "0000667f7f6b6300", "00007c6666666600", "00003c6666663c00",
            "00007c66667c6060", "00003e66663e0606", "00007c6660606000", "00003e603c067c00",
            "00187e1818180e00", "0000666666663e00", "00006666663c1800", "0000636b7f3e3600",
            "0000663c183c6600", "00006666663e0c78", "00007e0c18307e00", "1c30306030301c00",
            "1818180018181800", "380c0c060c0c3800", "0076dc0000000000", "ffffffffffffffff",
        ]
    },
    // http://www.sax.de/~zander/z9001/ex/zsatz.html
    // http://hc-ddr.hucki.net/wiki/doku.php/z9001:versionen
    "kc85": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "1010101000001000", "2828280000000000", "28287C287C282800",
            "103C503814781000", "60640810204C0C00", "1028283054483400", "0410200000000000",
            "0810202020100800", "2010080808102000", "0010543854100000", "0010107C10100000",
            "0000000010102000", "0000007C00000000", "0000000000303000", "0004081020400000",
            "38444C5464443800", "1030101010103800", "3844040810207C00", "7C08100804443800",
            "081828487C080800", "7C40780404443800", "1820407844443800", "7C04081020202000",
            "3844443844443800", "3844443C04083000", "0030300030300000", "0000100010102000",
            "0810204020100800", "00007C007C000000", "2010080408102000", "3844040810101000",

            "38445C545C403C00", "3844447C44444400", "7844447844447800", "3844404040443800",
            "7824242424247800", "7C40407840407C00", "7C40407840404000", "384440404C443C00",
            "4444447C44444400", "3810101010103800", "1C08080808483000", "4448506050484400",
            "4040404040407C00", "446C545444444400", "444464544C444400", "3844444444443800",
            "7844447840404000", "3844444454483400", "7844447850484400", "3C40403804047800",
            "7C10101010101000", "4444444444443800", "4444444444281000", "44444454546C4400",
            "4444281028444400", "4444442810101000", "7C04081020407C00", "3820202020203800",
            "0040201008040000", "3808080808083800", "1010102828444400", "00000000007C0000",

            "0020100800000000", "0000344C44443A00", "4040586444447800", "0000384440443800",
            "0404344C44443A00", "0000384C7C403800", "0810381010101000", "0000344C443C0438",
            "4040586444444400", "1000101010100800", "1000101010101020", "4040485070484400",
            "1010101010100800", "0000685454545400", "0000586444444400", "0000384444443800",
            "0000586444784040", "0000344C443C0404", "0000586440404000", "0000384038047800",
            "1010381010100800", "00004444444C3400", "0000444444281000", "0000545454542800",
            "0000442810284400", "00004444443C0438", "00007C0810207C00", "0810102010100800",
            "1010101010101000", "2010100810102000", "000000324C000000",
        ]
    },
    // http://www.trailingedge.com/exidy/
    "exidy": {
        "width": 8,
        "height": 8,
        "glyphs": [
            "0000000000000000", "1010101010001000", "2424240000000000", "24247e247e242400",
            "103c503814781000", "60640810204c0c00", "102828102a443a00", "1010100000000000",
            "1020404040201000", "1008040404081000", "1054381038541000", "0010107c10100000",
            "0000000000101020", "0000007c00000000", "0000000000001000", "0004081020400000",
            "38444c5464443800", "1030101010103800", "3844041820407c00", "7c04081804443800",
            "081828487c080800", "7c40780404443800", "1c20407844443800", "7c04081020202000",
            "3844443844443800", "3844443c04087000", "0000100010000000", "0000001000101020",
            "0810204020100800", "00007c007c000000", "2010080408102000", "3844041810001000",

            "3844545c58403c00", "102844447c444400", "f84444784444f800", "3844404040443800",
            "f84444444444f800", "7c40407840407c00", "7c40407840404000", "384440404e443c00",
            "4444447c44444400", "3810101010103800", "0e04040404443800", "4448507050484400",
            "4040404040407c00", "c6aa929282828200", "444464544c444400", "3844444444443800",
            "7844447840404000", "3844444454483400", "7844447850484400", "3844403804443800",
            "7c10101010101000", "4444444444443800", "4444442828101000", "8282829292aac600",
            "4444281028444400", "4444442810101000", "7c04081020407c00", "7c60606060607c00",
            "0040201008040000", "7c0c0c0c0c0c7c00", "0000102844000000", "0000000000007c00",

            "2010080000000000", "000038043c443c00", "4040784444447800", "00003c4040403c00",
            "04043c4444443c00", "000038447c403800", "0c10107c10101000", "00003c44443c0438",
            "4040784444444400", "1000301010103800", "1000101010101060", "2020242830282400",
            "3010101010103800", "0000ec9292929200", "0000784444444400", "0000384444443800",
            "0000784444784040", "00003c44443c0406", "00002c3020202000", "00003c4038047800",
            "10107c1010100c00", "0000444444443c00", "0000444428281000", "0000829292926c00",
            "0000442810284400", "00004444443c0438", "00007c0810207c00", "0810102010100800",
            "1010100010101000", "2010100810102000", "0000324c00000000", "2854285428542800",
        ]
    },
    "p2000": {
        "width": 8,
        "height": 10,
        "glyphs": [
            "00000000000000000000", "00040404040400040000", "000a0a0a000000000000", "000609081c08081f0000",
            "000e15140e05150e0000", "00181902040813030000", "000814140815120d0000", "00040408000000000000",
            "00020408080804020000", "00080402020204080000", "0004150e040e15040000", "000004041f0404000000",
            "00000000000008081000", "000000000e0000000000", "0000000000000c0c0000", "00000102040810000000",
            "00040a1111110a040000", "00040c040404040e0000", "000e11010608101f0000", "001f01020601110e0000",
            "0002060a121f02020000", "001f101e0101110e0000", "000608101e11110e0000", "001f0102040808080000",
            "000e11110e11110e0000", "000e11110f01020c0000", "00000008000000080000", "00000008000008081000",
            "00020408100804020000", "0000001f001f00000000", "00080402010204080000", "000e1101020400040000",

            "000e11171517100e0000", "00040a11111f11110000", "001e11111e11111e0000", "000e11101010110e0000",
            "001e09090909091e0000", "001f10101e10101f0000", "001f10101e1010100000", "000e11101013110f0000",
            "001111111f1111110000", "000e04040404040e0000", "000202020202120c0000", "00111214181412110000",
            "000808080808080f0000", "00111b15151111110000", "00111119151311110000", "000e11111111110e0000",
            "001e11111e1010100000", "000e11111115120d0000", "001e11111e1412110000", "000e11100e01110e0000",
            "001f0404040404040000", "001111111111110e0000", "001111110a0a04040000", "001111111515150a0000",
            "0011110a040a11110000", "0011110a040404040000", "001f01020408101f0000", "000004081f0804000000",
            "00101010101601020407", "000004021f0204000000", "0000040e150404000000", "000a0a1f0a1f0a0a0000",

            "000000000e0000000000", "0000000e010f110f0000", "0010101e1111111e0000", "0000000f1010100f0000",
            "0001010f1111110f0000", "0000000e111f100e0000", "000204040e0404040000", "0000000f1111110f010e",
            "0010101e111111110000", "0004000c0404040e0000", "0004000c040404040408", "000808090a0c0a090000",
            "000c04040404040e0000", "0000001a151515150000", "0000001e111111110000", "0000000e1111110e0000",
            "0000001e1111111e1010", "0000000f1111110f0101", "0000000b0c0808080000", "0000000f100e011e0000",
            "0000040e040404020000", "000000111111110f0000", "00000011110a0a040000", "000000111115150a0000",
            "000000110a040a110000", "000000111111110f010e", "0000001f0204081f0000", "00101010101103050701",
            "000a0a0a0a0a0a0a0000", "00180418041903050701", "0000000000000e000000", "001f1f1f1f1f1f1f0000",
        ]
    },
    "mpf": {
        "width": 8,
        "height": 12,
        "glyphs": [
            "000000000000000000000000", "101010101000001010000000", "484848000000000000000000", "282828fe28fe282828000000",
            "107e90907c1212fc10000000", "40a244081020448a04000000", "7088885020528c8c72000000", "181810200000000000000000",
            "081020202020201008000000", "201008080808081020000000", "001092543854921000000000", "00101010fe10101000000000",
            "000000000000003030204000", "00000000fe00000000000000", "000000000000003030000000", "000204081020408000000000",
            "7c82868a92a2c2827c000000", "10305010101010107c000000", "7c82020438408080fe000000", "7c8202023c0202827c000000",
            "040c14244484fe0404000000", "fe8080f80402028478000000", "3c408080fc8282827c000000", "fe8204081020202020000000",
            "7c8282827c8282827c000000", "7c8282827e02020478000000", "000000303000003030000000", "000000303000003030204000",
            "081020408040201008000000", "0000007c007c000000000000", "201008040204081020000000", "3c4242020c10100010000000",
            "3c429aaaaabc80403c000000", "3844828282fe828282000000", "fc4242427c424242fc000000", "3c428080808080423c000000",
            "f844424242424244f8000000", "fe808080f0808080fe000000", "fe808080f080808080000000", "3c428080809e82423c000000",
            "82828282fe82828282000000", "7c101010101010107c000000", "3e0808080808088870000000", "82848890a0d0888482000000",
            "8080808080808080fe000000", "82c6aa929282828282000000", "82c2a2928a86828282000000", "384482828282824438000000",
            "fc828282fc80808080000000", "3844828282928a443a000000", "fc828282fc90888482000000", "7c8280807c0202827c000000",
            "fe1010101010101010000000", "82828282828282827c000000", "828282444428281010000000", "828282829292aac682000000",
            "828244281028448282000000", "828244281010101010000000", "fe02040810204080fe000000", "784040404040404078000000",
            "008040201008040200000000", "780808080808080878000000", "102844820000000000000000", "0000000000000000fe000000",
            "303010080000000000000000", "00000078047c84847a000000", "808080b8c48484c4b8000000", "000000788480808478000000",
            "040404748c84848c74000000", "0000007884fc808078000000", "18242020f820202020000000", "000000748c848c7404048478",
            "808080b8c484848484000000", "001000301010101038000000", "0004000c0404040404044438", "8080808890a0d08884000000",
            "301010101010101038000000", "000000ec9292929292000000", "000000b8c484848484000000", "000000788484848478000000",
            "000000b8c48484c4b8808080", "000000748c84848c74040404", "000000b8c480808080000000", "000000788460188478000000",
            "002020f82020202418000000", "000000848484848c74000000", "000000828282442810000000", "00000082929292926c000000",
            "000000844830304884000000", "000000848484848c74048478", "000000fc08102040fc000000", "182020204020202018000000",
            "101010000010101000000000", "300808080408080830000000", "60920c000000000000000000", "489224489224489224000000",
        ]
    },
    "coco": {
        "width": 8,
        "height": 12,
        "glyphs": [
            "000000000000000000000000", "000000080808080800080000", "000000141414000000000000", "000000141436003614140000",
            "000000081e201c023c080000", "000000323204081026260000", "000000102828102a241a0000", "000000181818000000000000",
            "000000081020202010080000", "000000080402020204080000", "00000000081c3e1c08000000", "0000000008083e0808000000",
            "000000000000303010200000", "0000000000003e0000000000", "000000000000000030300000", "000000020204081020200000",
            "000000182424242424180000", "0000000818080808081c0000", "0000001c22021c20203e0000", "0000001c22020c02221c0000",
            "000000040c143e0404040000", "0000003e203c0202221c0000", "0000001c20203c22221c0000", "0000003e0204081020200000",
            "0000001c22221c22221c0000", "0000001c22221e02021c0000", "000000001818001818000000", "000000181800181808100000",
            "000000040810201008040000", "00000000003e003e00000000", "000000100804020408100000", "000000182404080800080000",
            "0000001c22021a2a2a1c0000", "000000081422223e22220000", "0000003c12121c12123c0000", "0000001c22202020221c0000",
            "0000003c12121212123c0000", "0000003e20203820203e0000", "0000003e2020382020200000", "0000001c22202026221e0000",
            "0000002222223e2222220000", "0000001c08080808081c0000", "0000000202020222221c0000", "000000222428302824220000",
            "0000002020202020203e0000", "00000022362a2a2222220000", "00000022322a262222220000", "0000003e22222222223e0000",
            "0000003c22223c2020200000", "0000001c2222222a241a0000", "0000003c22223c2824220000", "0000001c22100804221c0000",
            "0000003e0808080808080000", "0000002222222222221c0000", "000000222222141408080000", "000000222222222a36220000",
            "000000222214081422220000", "000000222214080808080000", "0000003e02040810203e0000", "000000382020202020380000",
            "000000202010080402020000", "0000000e02020202020e0000", "000000081c2a080808080000", "0000000008103e1008000000",
            "ffffffe3ddfde5d5d5e3ffff", "fffffff7ebddddc1ddddffff", "ffffffc3edede3ededc3ffff", "ffffffe3dddfdfdfdde3ffff",
            "ffffffc3edededededc3ffff", "ffffffc1dfdfc7dfdfc1ffff", "ffffffc1dfdfc7dfdfdfffff", "ffffffe3dddfdfd9dde1ffff",
            "ffffffddddddc1ddddddffff", "ffffffe3f7f7f7f7f7e3ffff", "fffffffdfdfdfddddde3ffff", "ffffffdddbd7cfd7dbddffff",
            "ffffffdfdfdfdfdfdfc1ffff", "ffffffddc9d5d5ddddddffff", "ffffffddcdd5d9ddddddffff", "ffffffc1ddddddddddc1ffff",
            "ffffffc3ddddc3dfdfdfffff", "ffffffe3ddddddd5dbe5ffff", "ffffffc3ddddc3d7dbddffff", "ffffffe3ddeff7fbdde3ffff",
            "ffffffc1f7f7f7f7f7f7ffff", "ffffffdddddddddddde3ffff", "ffffffddddddebebf7f7ffff", "ffffffddddddddd5c9ddffff",
            "ffffffddddebf7ebddddffff", "ffffffddddebf7f7f7f7ffff", "ffffffc1fdfbf7efdfc1ffff", "ffffffc7dfdfdfdfdfc7ffff",
            "ffffffdfdfeff7fbfdfdffff", "fffffff1fdfdfdfdfdf1ffff", "fffffff7e3d5f7f7f7f7ffff", "fffffffff7efc1eff7ffffff"
        ]
    },
    "coco3": {
        "width": 8,
        "height": 12,
        "glyphs": [
            "000000000000000000000000", "000010101010100010000000", "000028282800000000000000", "000028287c287c2828000000",
            "0000103c5038147810000000", "000060640810204c0c000000", "000020505020544834000000", "000010102000000000000000",
            "000008102020201008000000", "000020100808081020000000", "000000105438385410000000", "00000010107c101000000000",
            "000000000000002020400000", "00000000007c000000000000", "000000000000000010000000", "000000040810204000000000",
            "000038444c54644438000000", "000010301010101038000000", "00003844043840407c000000", "000038440408044438000000",
            "0000081828487c0808000000", "00007c407804044438000000", "000038404078444438000000", "00007c040810204040000000",
            "000038444438444438000000", "00003844443c040438000000", "000000001000001000000000", "000000001000001010200000",
            "000008102040201008000000", "000000007c007c0000000000", "000020100804081020000000", "000038440408100010000000",
            "0000384404344c4c38000000", "0000102844447c4444000000", "000078242438242478000000", "000038444040404438000000",
            "000078242424242478000000", "00007c40407040407c000000", "00007c404070404040000000", "0000384440404c4438000000",
            "00004444447c444444000000", "000038101010101038000000", "000004040404044438000000", "000044485060504844000000",
            "00004040404040407c000000", "0000446c5454444444000000", "0000444464544c4444000000", "000038444444444438000000",
            "000078444478404040000000", "000038444444544834000000", "000078444478504844000000", "000038444038044438000000",
            "00007c101010101010000000", "000044444444444438000000", "000044444428281010000000", "000044444444546c44000000",
            "000044442810284444000000", "000044442810101010000000", "00007c04081020407c000000", "000038202020202038000000",
            "000000402010080400000000", "000038080808080838000000", "000010385410101010000000", "00000010207c201000000000",
            "000010284400000000000000", "0000000038043c443c000000", "000040405864446458000000", "000000003844404438000000",
            "00000404344c444c34000000", "0000000038447c4038000000", "000008141038101010000000", "00000000344c444c34043800",
            "000040405864444444000000", "000010003010101038000000", "000004000404040444380000", "000040404850605048000000",
            "000030101010101038000000", "000000007854545454000000", "000000005864444444000000", "000000003844444438000000",
            "000000007844444478404000", "000000003c4444443c040400", "000000005864404040000000", "000000003c40380478000000",
            "000020207020202418000000", "000000004444444c34000000", "000000004444442810000000", "000000004454542828000000",
            "000000004428102844000000", "000000004444443c04380000", "000000007c0810207c000000", "000008101020101008000000",
            "000010101000101010000000", "000020101008101020000000", "000020540800000000000000", "00000000000000007c000000",
        ]
    },
    "ega": {
        "width": 8,
        "height": 14,
        "glyphs": [
            "00000000000000000000000000", "0000183C3C3C18180018180000", "00666666240000000000000000", "00006C6CFE6C6C6CFE6C6C0000",
            "18187CC6C2C07C0686C67C1818", "00000000C2C60C183066C60000", "0000386C6C3876DCCCCC760000", "00303030600000000000000000",
            "00000C183030303030180C0000", "000030180C0C0C0C0C18300000", "00000000663CFF3C6600000000", "0000000018187E181800000000",
            "00000000000000001818183000", "000000000000FE000000000000", "00000000000000000018180000", "000002060C183060C080000000",
            "00007CC6CEDEF6E6C6C67C0000", "000018387818181818187E0000", "00007CC6060C183060C6FE0000", "00007CC606063C0606C67C0000",
            "00000C1C3C6CCCFE0C0C1E0000", "0000FEC0C0C0FC0606C67C0000", "00003860C0C0FCC6C6C67C0000", "0000FEC6060C18303030300000",
            "00007CC6C6C67CC6C6C67C0000", "00007CC6C6C67E06060C780000", "00000018180000001818000000", "00000018180000001818300000",
            "0000060C18306030180C060000", "00000000007E00007E00000000", "00006030180C060C1830600000", "00007CC6C60C18180018180000",

            "00007CC6C6DEDEDEDCC07C0000", "000010386CC6C6FEC6C6C60000", "0000FC6666667C666666FC0000", "00003C66C2C0C0C0C2663C0000",
            "0000F86C66666666666CF80000", "0000FE66626878686266FE0000", "0000FE66626878686060F00000", "00003C66C2C0C0DEC6663A0000",
            "0000C6C6C6C6FEC6C6C6C60000", "00003C181818181818183C0000", "00001E0C0C0C0C0CCCCC780000", "0000E6666C6C786C6C66E60000",
            "0000F060606060606266FE0000", "0000C6EEFEFED6C6C6C6C60000", "0000C6E6F6FEDECEC6C6C60000", "0000386CC6C6C6C6C66C380000",
            "0000FC6666667C606060F00000", "00007CC6C6C6C6D6DE7C0C0E00", "0000FC6666667C6C6666E60000", "00007CC6C660380CC6C67C0000",
            "00007E7E5A18181818183C0000", "0000C6C6C6C6C6C6C6C67C0000", "0000C6C6C6C6C6C66C38100000", "0000C6C6C6C6D6D6FE7C6C0000",
            "0000C6C66C3838386CC6C60000", "0000666666663C1818183C0000", "0000FEC68C183060C2C6FE0000", "00003C303030303030303C0000",
            "000080C0E070381C0E06020000", "00003C0C0C0C0C0C0C0C3C0000", "10386CC6000000000000000000", "000000000000000000000000FF",

            "30301800000000000000000000", "0000000000780C7CCCCC760000", "0000E06060786C6666667C0000", "00000000007CC6C0C0C67C0000",
            "00001C0C0C3C6CCCCCCC760000", "00000000007CC6FEC0C67C0000", "0000386C6460F0606060F00000", "000000000076CCCCCC7C0CCC78",
            "0000E060606C76666666E60000", "000018180038181818183C0000", "00000606000E0606060666663C", "0000E06060666C786C66E60000",
            "000038181818181818183C0000", "0000000000ECFED6D6D6C60000", "0000000000DC66666666660000", "00000000007CC6C6C6C67C0000",
            "0000000000DC6666667C6060F0", "000000000076CCCCCC7C0C0C1E", "0000000000DC76666060F00000", "00000000007CC6701CC67C0000",
            "0000103030FC303030361C0000", "0000000000CCCCCCCCCC760000", "0000000000666666663C180000", "0000000000C6C6D6D6FE6C0000",
            "0000000000C66C38386CC60000", "0000000000C6C6C6C67E060CF8", "0000000000FECC183066FE0000", "00000E181818701818180E0000",
            "00001818181800181818180000", "0000701818180E181818700000", "000076DC000000000000000000",
        ]
    },
    "mda": {
        "width": 9,
        "height": 14,
        "glyphs": [
            "0000000000000000000000000000", "0000183C3C3C1818001818000000", "0063636322000000000000000000", "000036367F3636367F3636000000",
            "0C0C3E6361603E0343633E0C0C00", "000000006163060C183363000000", "00001C36361C3B6E66663B000000", "0030303060000000000000000000",
            "00000C183030303030180C000000", "0000180C06060606060C18000000", "00000000663CFF3C660000000000", "000000181818FF18181800000000",
            "0000000000000000181818300000", "000000000000FF00000000000000", "0000000000000000001818000000", "00000103060C1830604000000000",
            "00003E63676F7B7363633E000000", "00000C1C3C0C0C0C0C0C3F000000", "00003E6303060C1830637F000000", "00003E6303031E0303633E000000",
            "0000060E1E36667F06060F000000", "00007F6060607E0303633E000000", "00001C3060607E6363633E000000", "00007F6303060C18181818000000",
            "00003E6363633E6363633E000000", "00003E6363633F0303063C000000", "0000001818000000181800000000", "0000001818000000181830000000",
            "0000060C18306030180C06000000", "00000000007E00007E0000000000", "00006030180C060C183060000000", "00003E6363060C0C000C0C000000",

            "00003E63636F6F6F6E603E000000", "0000081C3663637F636363000000", "00007E3333333E3333337E000000", "00001E336160606061331E000000",
            "00007C363333333333367C000000", "00007F3331343C3431337F000000", "00007F3331343C34303078000000", "00001E336160606F63331D000000",
            "0000636363637F63636363000000", "00003C181818181818183C000000", "00000F060606060666663C000000", "0000733336363C36363373000000",
            "000078303030303031337F000000", "0000C3E7FFDBC3C3C3C3C3000000", "000063737B7F6F67636363000000", "00001C366363636363361C000000",
            "00007E3333333E30303078000000", "00003E636363636B6F3E06070000", "00007E3333333E36333373000000", "00003E6363301C0663633E000000",
            "0000FFDB9918181818183C000000", "000063636363636363633E000000", "0000C3C3C3C3C3C3663C18000000", "0000C3C3C3C3DBDBFF6666000000",
            "0000C3C3663C183C66C3C3000000", "0000C3C3C3663C1818183C000000", "0000FFC3860C183061C3FF000000", "00003C303030303030303C000000",
            "0000406070381C0E070301000000", "00003C0C0C0C0C0C0C0C3C000000", "081C366300000000000000000000", "000000000000000000000000FF00",

            "18180C0000000000000000000000", "00000000003C063E66663B000000", "00007030303C363333336E000000", "00000000003E636060633E000000",
            "00000E06061E366666663B000000", "00000000003E637F60633E000000", "00001C3632307C30303078000000", "00000000003B6666663E06663C00",
            "0000703030363B33333373000000", "00000C0C001C0C0C0C0C1E000000", "00000606000E0606060666663C00", "000070303033363C363373000000",
            "00001C0C0C0C0C0C0C0C1E000000", "0000000000E6FFDBDBDBDB000000", "00000000006E3333333333000000", "00000000003E636363633E000000",
            "00000000006E3333333E30307800", "00000000003B6666663E06060F00", "00000000006E3B33303078000000", "00000000003E63380E633E000000",
            "00000818187E1818181B0E000000", "000000000066666666663B000000", "0000000000C3C3C3663C18000000", "0000000000C3C3DBDBFF66000000",
            "000000000063361C1C3663000000", "0000000000636363633F03063C00", "00000000007F660C18337F000000", "00000E181818701818180E000000",
            "0000181818180018181818000000", "0000701818180E18181870000000", "00003B6E00000000000000000000",
        ]
    },
    "vga": {
        "width": 9,
        "height": 16,
        "glyphs": [
            "00000000000000000000000000000000", "0000183C3C3C18181800181800000000", "00666666240000000000000000000000", "0000006C6CFE6C6C6CFE6C6C00000000",
            "18187CC6C2C07C060686C67C18180000", "00000000C2C60C183060C68600000000", "0000386C6C3876DCCCCCCC7600000000", "00303030600000000000000000000000",
            "00000C18303030303030180C00000000", "000030180C0C0C0C0C0C183000000000", "0000000000663CFF3C66000000000000", "000000000018187E1818000000000000",
            "00000000000000000018181830000000", "00000000000000FE0000000000000000", "00000000000000000000181800000000", "0000000002060C183060C08000000000",
            "00003C66C3C3DBDBC3C3663C00000000", "00001838781818181818187E00000000", "00007CC6060C183060C0C6FE00000000", "00007CC606063C060606C67C00000000",
            "00000C1C3C6CCCFE0C0C0C1E00000000", "0000FEC0C0C0FC060606C67C00000000", "00003860C0C0FCC6C6C6C67C00000000", "0000FEC606060C183030303000000000",
            "00007CC6C6C67CC6C6C6C67C00000000", "00007CC6C6C67E0606060C7800000000", "00000000181800000018180000000000", "00000000181800000018183000000000",
            "000000060C18306030180C0600000000", "00000000007E00007E00000000000000", "0000006030180C060C18306000000000", "00007CC6C60C18181800181800000000",

            "0000007CC6C6DEDEDEDCC07C00000000", "000010386CC6C6FEC6C6C6C600000000", "0000FC6666667C66666666FC00000000", "00003C66C2C0C0C0C0C2663C00000000",
            "0000F86C6666666666666CF800000000", "0000FE6662687868606266FE00000000", "0000FE6662687868606060F000000000", "00003C66C2C0C0DEC6C6663A00000000",
            "0000C6C6C6C6FEC6C6C6C6C600000000", "00003C18181818181818183C00000000", "00001E0C0C0C0C0CCCCCCC7800000000", "0000E666666C78786C6666E600000000",
            "0000F06060606060606266FE00000000", "0000C3E7FFFFDBC3C3C3C3C300000000", "0000C6E6F6FEDECEC6C6C6C600000000", "00007CC6C6C6C6C6C6C6C67C00000000",
            "0000FC6666667C60606060F000000000", "00007CC6C6C6C6C6C6D6DE7C0C0E0000", "0000FC6666667C6C666666E600000000", "00007CC6C660380C06C6C67C00000000",
            "0000FFDB991818181818183C00000000", "0000C6C6C6C6C6C6C6C6C67C00000000", "0000C3C3C3C3C3C3C3663C1800000000", "0000C3C3C3C3C3DBDBFF666600000000",
            "0000C3C3663C18183C66C3C300000000", "0000C3C3C3663C181818183C00000000", "0000FFC3860C183060C1C3FF00000000", "00003C30303030303030303C00000000",
            "00000080C0E070381C0E060200000000", "00003C0C0C0C0C0C0C0C0C3C00000000", "10386CC6000000000000000000000000", "00000000000000000000000000FF0000",

            "30301800000000000000000000000000", "0000000000780C7CCCCCCC7600000000", "0000E06060786C666666667C00000000", "00000000007CC6C0C0C0C67C00000000",
            "00001C0C0C3C6CCCCCCCCC7600000000", "00000000007CC6FEC0C0C67C00000000", "0000386C6460F060606060F000000000", "000000000076CCCCCCCCCC7C0CCC7800",
            "0000E060606C7666666666E600000000", "00001818003818181818183C00000000", "00000606000E06060606060666663C00", "0000E06060666C78786C66E600000000",
            "00003818181818181818183C00000000", "0000000000E6FFDBDBDBDBDB00000000", "0000000000DC66666666666600000000", "00000000007CC6C6C6C6C67C00000000",
            "0000000000DC66666666667C6060F000", "000000000076CCCCCCCCCC7C0C0C1E00", "0000000000DC7666606060F000000000", "00000000007CC660380CC67C00000000",
            "0000103030FC30303030361C00000000", "0000000000CCCCCCCCCCCC7600000000", "0000000000C3C3C3C3663C1800000000", "0000000000C3C3C3DBDBFF6600000000",
            "0000000000C3663C183C66C300000000", "0000000000C6C6C6C6C6C67E060CF800", "0000000000FECC183060C6FE00000000", "00000E18181870181818180E00000000",
            "00001818181800181818181800000000", "0000701818180E181818187000000000", "000076DC000000000000000000000000",
        ]
    },
    "olivetti": {
        "width": 8,
        "height": 16,
        "glyphs": [
            "00000000000000000000000000000000", "0000183C3C3C18180018180000000000", "00666666240000000000000000000000", "000036367F3636367F36360000000000",
            "08083E6360603E0303633E0808000000", "0000006163060C183063430000000000", "00001C36361C3B6E66663B0000000000", "00303030600000000000000000000000",
            "00000C183030303030180C0000000000", "000030180C0C0C0C0C18300000000000", "00000000663C7E3C6600000000000000", "0000000018187E181800000000000000",
            "00000000000000001818183000000000", "0000000000007E000000000000000000", "00000000000000000018180000000000", "00000103060C18306040000000000000",
            "00003E63676F7B7363633E0000000000", "00000C1C3C0C0C0C0C0C3F0000000000", "00003E6303060C1830637F0000000000", "00003E6303031E0303633E0000000000",
            "0000060E1E36667F06060F0000000000", "00007E6060607E0303633E0000000000", "00001C3060607E6363633E0000000000", "00007F6303060C181818180000000000",
            "00003E6363633E6363633E0000000000", "00003E6363633F0303061C0000000000", "00000018180000001818000000000000", "00000018180000001818300000000000",
            "0000060C18306030180C060000000000", "000000007E0000007E00000000000000", "00006030180C060C1830600000000000", "00003E6363060C0C000C0C0000000000",

            "00003E63636F6F6F6E603E0000000000", "0000081C3663637F6363630000000000", "00007E3333333E3333337E0000000000", "00001E336060606060331E0000000000",
            "00007C363333333333367C0000000000", "00007F3330343C3430337F0000000000", "00007F3330343C343030780000000000", "00001E336060606F63331D0000000000",
            "0000636363637F636363630000000000", "00003C181818181818183C0000000000", "00000F060606060666663C0000000000", "0000733336363C363633730000000000",
            "000078303030303030337F0000000000", "000063777F6B63636363630000000000", "000063737B7F6F676363630000000000", "00001C366363636363361C0000000000",
            "00007E3333333E303030780000000000", "00001C36636363636B3E1C0603000000", "00007E3333333E363333730000000000", "00003E6363301C0663633E0000000000",
            "00007E5A1818181818183C0000000000", "000063636363636363633E0000000000", "0000636363636363361C080000000000", "000063636363636B6B7F360000000000",
            "0000636363361C366363630000000000", "000066666666663C18183C0000000000", "00007F63060C183060637F0000000000", "00003C303030303030303C0000000000",
            "0000406030180C060301000000000000", "00003C0C0C0C0C0C0C0C3C0000000000", "081C3663000000000000000000000000", "00000000000000000000000000007F00",

            "18180C00000000000000000000000000", "00000000003C063E66663B0000000000", "00007030303E333333336E0000000000", "00000000003E636060633E0000000000",
            "00000E06063E666666663B0000000000", "00000000003E637F60633E0000000000", "00001E33307C30303030780000000000", "00000000003B666666663E06663C0000",
            "00007030303E33333333730000000000", "00000C0C001C0C0C0C0C1E0000000000", "00000C0C001C0C0C0C0C0C0CCC780000", "000070303033363C3633730000000000",
            "00001C0C0C0C0C0C0C0C1E0000000000", "0000000000667F6B6B6B6B0000000000", "00000000006E33333333330000000000", "00000000003E636363633E0000000000",
            "00000000006E333333333E3030780000", "00000000003B666666663E06060F0000", "00000000006E33303030780000000000", "00000000003E63380E633E0000000000",
            "00000008187E1818181B0E0000000000", "000000000066666666663B0000000000", "0000000000636363361C080000000000", "000000000063636B6B7F360000000000",
            "000000000063361C1C36630000000000", "000000000063666666663E06663C0000", "00000000007F660C18337F0000000000", "00000E181818701818180E0000000000",
            "00001818181800181818180000000000", "0000701818180E181818700000000000", "00003B6E000000000000000000000000",
        ]
    },
    // http://www.seasip.info/VintagePC/wy700.html
    "wyse-serif": {
        "width": 16,
        "height": 16,
        "glyphs": [
            "0000000000000000000000000000000000000000000000000000000000000000", "0000000003c007e00ff00ff00ff007e003c003c0000003c003c0000000000000",
            "00003c3c3c3c1c380c3000000000000000000000000000000000000000000000", "0000000000001c381c387ffe1c381c381c381c387ffe1c381c38000000000000",
            "03c003c007e01e783c3c3c001e0007e00078003c3c3c1e7807e003c003c00000", "00000000000000003c3c3c7800f001e003c007800f001e3c3c3c000000000000",
            "0000000007c01ef03c781ef007c00f9e3ffc78f878783cfc0f9e000000000000", "00000f000f000f001e0000000000000000000000000000000000000000000000",
            "0000000001e003c007800f000f000f000f000f00078003c001e0000000000000", "0000000001e000f00078003c003c003c003c003c007800f001e0000000000000",
            "000000000000000000003c3c0ff07ffe0ff03c3c000000000000000000000000", "000000000000000003c003c003c07ffe03c003c003c000000000000000000000",
            "000000000000000000000000000000000000000003c003c00380070000000000", "00000000000000000000000000007ffe00000000000000000000000000000000",
            "0000000000000000000000000000000000000000000003c003c0000000000000", "000000000000003c007800f001e003c007800f001e003c000000000000000000",

            "0000000007e01e783c3c3c7c3cfc3dbc3f3c3e3c3c3c1e7807e0000000000000", "0000000003c00fc03fc003c003c003c003c003c003c003c03ffc000000000000",
            "000000000fe03c78003c003c007800f003c00f001e003c3c3ffc000000000000", "000000000ff03c3c001e001e003c03f0003c001e001e3c3c0ff0000000000000",
            "0000000001f003f007f00ff01ef03cf03ffc00f000f000f003fc000000000000", "000000003ffe3c003c003c003ff0003c001e001e001e3c3c0ff0000000000000",
            "0000000007f01e003c003c003c003ff03c3c3c1e3c1e1e3c07f0000000000000", "000000003ffc3c3c003c007800f001e003c003c003c003c003c0000000000000",
            "0000000007f01e3c3c1e3c1e1e3c07f01e3c3c1e3c1e1e3c07f0000000000000", "0000000007f01e3c3c1e3c1e1e1e07fe001e001e001e003c0ff0000000000000",
            "000000000000000003c003c0000000000000000003c003c00000000000000000", "000000000000000003c003c0000000000000000003c003c00780000000000000",
            "0000000001e003c007800f001e003c001e000f00078003c001e0000000000000", "0000000000000000000000003ffc000000003ffc000000000000000000000000",
            "00000000078003c001e000f00078003c007800f001e003c00780000000000000", "0000000007e01e783c3c007800f001e003c003c0000003c003c0000000000000",

            "000000000ffc3c1e781e79fe7b8e7b8e7b8e79fc78003c000ffc000000000000", "0000000003c007e00ff01e783c3c3c3c3ffc3c3c3c3c3c3c3c3c000000000000",
            "000000007ff01e3c1e1e1e1e1e3c1ff01e3c1e1e1e1e1e3c7ff0000000000000", "0000000007f01e3c3c1e3c003c003c003c003c003c1e1e3c07f0000000000000",
            "000000007ff01e3c1e1e1e1e1e1e1e1e1e1e1e1e1e1e1e3c7ff0000000000000", "000000007ffe1e0e1e061e001e601fe01e601e001e061e0e7ffe000000000000",
            "000000007ffe1e0e1e061e001e601fe01e601e001e001e007f80000000000000", "0000000007f01e3c3c1e3c003c003c003c7e3c1e3c1e1e3e07f6000000000000",
            "000000003c1e3c1e3c1e3c1e3c1e3ffe3c1e3c1e3c1e3c1e3c1e000000000000", "000000000ff003c003c003c003c003c003c003c003c003c00ff0000000000000",
            "0000000003fe00780078007800780078007800783c781ff007c0000000000000", "000000007e3c1e781ef01fe01fc01fc01fe01ef01e781e3c7e1e000000000000",
            "000000007f801e001e001e001e001e001e001e001e061e0e7ffe000000000000", "00000000781e7c3e7e7e7ffe7bde799e781e781e781e781e781e000000000000",
            "000000003c1e3c1e3e1e3f1e3f9e3dde3cfe3c7e3c3e3c1e3c1e000000000000", "0000000007f01e3c3c1e3c1e3c1e3c1e3c1e3c1e3c1e1e3c07f0000000000000",

            "000000007ff01e3c1e1e1e1e1e3c1ff01e001e001e001e007f80000000000000", "0000000007f01e3c3c1e3c1e3c1e3c1e3c1e3dde3cfe1e7c07f8001c00000000",
            "000000007ff01e3c1e1e1e1e1e3c1ff01fe01ef01e781e3c7e1e000000000000", "000000000ff03c3c781e3c000f0003c000f0003c781e3c3c0ff0000000000000",
            "000000007ffe73ce63c603c003c003c003c003c003c003c00ff0000000000000", "000000003c1e3c1e3c1e3c1e3c1e3c1e3c1e3c1e3c1e1e3c07f0000000000000",
            "000000003c3c3c3c3c3c3c3c3c3c3c3c3c3c1e780ff007e003c0000000000000", "00000000781e781e781e781e781e781e799e7bde7ffe3e7c1c38000000000000",
            "000000003c3c3c3c1e780ff007e003c007e00ff01e783c3c3c3c000000000000", "000000003c3c3c3c3c3c3c3c1e780ff007e003c003c003c00ff0000000000000",
            "000000003ffc383c307800f001e003c007800f001e0c3c1c3ffc000000000000", "000000000ff00f000f000f000f000f000f000f000f000f000ff0000000000000",
            "0000000000003c001e000f00078003c001e000f00078003c0000000000000000", "000000000ff000f000f000f000f000f000f000f000f000f00ff0000000000000",
            "03c007e00ff01e783c3c00000000000000000000000000000000000000000000", "000000000000000000000000000000000000000000000000000000007fff0000",

            "03c003c001e00000000000000000000000000000000000000000000000000000", "0000000000000000000000000fe000780ff83c783c783c780f9e000000000000",
            "000000003f000f000f000f000ff00f3c0f1e0f1e0f1e0f1e3cf8000000000000", "0000000000000000000000000ff83c1e3c003c003c003c1e0ff8000000000000",
            "0000000001f800780078007807f81e783c783c783c783c780f9e000000000000", "0000000000000000000000000ff83c1e3c1e3ffe3c003c1e0ff8000000000000",
            "0000000003f00f3c0f0c0f000f003ff00f000f000f000f003fc0000000000000", "0000000000000000000000000f9e3c783c783c783c780ff800783c780fe00000",
            "000000003f000f000f000f000f780f9e0f1e0f1e0f1e0f1e3f1e000000000000", "00000000000000f000f0000003f000f000f000f000f000f003fc000000000000",
            "000000000000003c003c000000fc003c003c003c003c003c3c3c1e7807e00000", "000000003f000f000f000f000f1e0f3c0f780ff00f780f3c3f1e000000000000",
            "0000000003f000f000f000f000f000f000f000f000f000f003fc000000000000", "0000000000000000000000007e7c7ffe7bde7bde7bde7bde7bde000000000000",
            "0000000000000000000000003cf80f3c0f1e0f1e0f1e0f1e0f1e000000000000", "00000000000000000000000007f01e3c3c1e3c1e3c1e1e3c07f0000000000000",

            "0000000000000000000000003cf00f3c0f1e0f1e0f3c0ff00f000f003fc00000", "000000000000000000000000079e1e783c783c781e7807f80078007800fe0000",
            "0000000000000000000000003cf80f9e0f000f000f000f003fc0000000000000", "0000000000000000000000000ff83c1e3c000ff8001e3c1e0ff8000000000000",
            "0000000001800380078007807ff80780078007800780079e01f8000000000000", "0000000000000000000000003c783c783c783c783c783c780f9e000000000000",
            "000000000000000000000000781e781e781e781e1e7807e00180000000000000", "000000000000000000000000781e781e781e799e7bde3ffc1e78000000000000",
            "0000000000000000000000003c3c0e7007e003c007e00e703c3c000000000000", "0000000000000000000000003c1e3c1e3c1e3c1e1e1e07fe001e003c0ff00000",
            "0000000000000000000000003ffc3c3c00f003c00f003c3c3ffc000000000000", "0000000000fc01e003c003c003c03f8003c003c003c001e000fc000000000000",
            "0000000003c003c003c003c003c0000003c003c003c003c003c0000000000000", "000000003f00078003c003c003c001fc03c003c003c007803f00000000000000",
            "000000000f9e3cf8000000000000000000000000000000000000000000000000", "000000000000000000c003f00f3c3c0f3c0f3fff000000000000000000000000"
        ]
    },
    // http://www.seasip.info/VintagePC/wy700.html
    "wyse-sans": {
        "width": 16,
        "height": 16,
        "glyphs": [
            "0000000000000000000000000000000000000000000000000000000000000000", "0000000001c001c001c001c001c001c001c001c0000001c001c0000000000000",
            "00001c381c381c381c3800000000000000000000000000000000000000000000", "0000000000001c381c387ffe1c381c381c381c387ffe1c381c38000000000000",
            "000001800ff0399c718e718039800ff0019c018e718e399c0ff0018000000000", "00000000000000001e1c1e38007000e001c0038007000e3c1c3c000000000000",
            "0000000007c01c7038381c7007c00fce38fc7078707838fc0fce000000000000", "000000e001c00380070000000000000000000000000000000000000000000000",
            "0000000000e001c0038007000700070007000700038001c000e0000000000000", "000000000700038001c000e000e000e000e000e001c003800700000000000000",
            "000000000000000000000e3803e03ffe03e00e38000000000000000000000000", "000000000000000001c001c001c03ffe01c001c001c000000000000000000000",
            "0000000000000000000000000000000000000000000003c003c0038007000000", "00000000000000000000000000003ffe00000000000000000000000000000000",
            "0000000000000000000000000000000000000000000003c003c0000000000000", "000000000000001c0038007000e001c0038007000e001c000000000000000000",

            "0000000007e01c38383c387c38dc399c3b1c3e1c3c1c1c3807e0000000000000", "0000000001c003c00fc001c001c001c001c001c001c001c001c0000000000000",
            "000000000ff0381c000e000e001c007001c007001c0038003ffe000000000000", "000000000ff0381c000e000e001c01f0001c000e000e381c0ff0000000000000",
            "0000000001f003f007700e701c7038703ffc0070007000700070000000000000", "000000003ffe3800380038003ff0001c000e000e000e381c0ff0000000000000",
            "0000000007f01c003800380038003ff0381c380e380e1c1c07f0000000000000", "000000003ff800380038007000e001c003800380038003800380000000000000",
            "0000000007f01c1c380e380e1c1c07f01c1c380e380e1c1c07f0000000000000", "0000000007f01c1c380e380e1c0e07fe000e000e000e001c0ff0000000000000",
            "0000000000000000038003800000000000000000038003800000000000000000", "0000000000000000038003800000000000000000038003800700000000000000",
            "0000000000e001c0038007000e001c000e000700038001c000e0000000000000", "0000000000000000000000003ffc000000003ffc000000000000000000000000",
            "000000000700038001c000e000700038007000e001c003800700000000000000", "0000000007e01c38381c0038007000e001c001c0000001c001c0000000000000",

            "000000000ff0381c700e71fe738e738e738e71fc700038000ffc000000000000", "0000000003c007e00e701c38381c381c3ffc381c381c381c381c000000000000",
            "000000003ff0381c380e380e381c3ff0381c380e380e381c3ff0000000000000", "0000000007f01c1c380e38003800380038003800380e1c1c07f0000000000000",
            "000000003ff0381c380e380e380e380e380e380e380e381c3ff0000000000000", "000000003ffc38003800380038003fe038003800380038003ffc000000000000",
            "000000003ffc38003800380038003fe038003800380038003800000000000000", "0000000007f01c1c380e380038003800383e380e380e1c1c07f0000000000000",
            "00000000380e380e380e380e380e3ffe380e380e380e380e380e000000000000", "0000000001c001c001c001c001c001c001c001c001c001c001c0000000000000",
            "00000000001c001c001c001c001c001c001c001c1c1c0e3803e0000000000000", "000000001c381c701ce01dc01f801f801dc01ce01c701c381c1c000000000000",
            "0000000038003800380038003800380038003800380038003ffc000000000000", "00000000781e7c3e7e7e77ee73ce718e700e700e700e700e700e000000000000",
            "00000000380e3c0e3e0e3f0e3b8e39ce38ee387e383e381e380e000000000000", "0000000007f01c1c380e380e380e380e380e380e380e1c1c07f0000000000000",

            "000000003ff0381c380e380e381c3ff038003800380038003800000000000000", "0000000007f01c1c380e380e380e380e380e380e38ee1c7c07f8001c00000000",
            "000000003ff0381c380e380e381c3ff038e038703838381c380e000000000000", "000000000ff0381c700e700038000ff0001c000e700e381c0ff0000000000000",
            "000000003ffe01c001c001c001c001c001c001c001c001c001c0000000000000", "00000000380e380e380e380e380e380e380e380e380e1c1c07f0000000000000",
            "00000000381c381c381c381c381c381c381c1c380e7007e003c0000000000000", "00000000700e700e700e700e700e700e718e73ce77ee3e7c1c38000000000000",
            "00000000381c381c1c380e7007e003c007e00e701c38381c381c000000000000", "00000000380e1c1c0e38077003e001c001c001c001c001c001c0000000000000",
            "000000003ffe001c0038007000e001c0038007000e001c003ffe000000000000", "0000000007f007000700070007000700070007000700070007f0000000000000",
            "0000000000001c000e000700038001c000e000700038001c0000000000000000", "0000000007f000700070007000700070007000700070007007f0000000000000",
            "03c007e00e701c38381c00000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000000000ffff0000",

            "00000700038001c000e000000000000000000000000000000000000000000000", "0000000000000000000000000ff8000e0ffe380e380e380e0ffe000000000000",
            "0000000038003800380038003ff0381c380e380e380e380e3ff8000000000000", "0000000000000000000000000ff8380e380038003800380e0ff8000000000000",
            "00000000000e000e000e000e07fe1c0e380e380e380e380e0ffe000000000000", "0000000000000000000000000ff8380e380e3ffe380038000ffc000000000000",
            "0000000000f803800380038003800ff003800380038003800380000000000000", "0000000000000000000000000ff8380e380e380e380e0ffe000e000e1ff80000",
            "0000000038003800380038003bf83c0e380e380e380e380e380e000000000000", "00000000000001c001c0000001c001c001c001c001c001c001c0000000000000",
            "000000000000007000700000007000700070007000700070007000e00f800000", "000000000e000e000e000e000e380e700ee00fc00ee00e700e38000000000000",
            "0000000001c001c001c001c001c001c001c001c001c001c001c0000000000000", "0000000000000000000000003e7839ce39ce39ce39ce39ce39ce000000000000",
            "0000000000000000000000003fe03838381c381c381c381c381c000000000000", "00000000000000000000000007f01c1c380e380e380e1c1c07f0000000000000",

            "0000000000000000000000003ff0381c380e380e381c3ff03800380038000000", "00000000000000000000000007fe1c0e380e380e1c0e07fe000e000e000e0000",
            "0000000000000000000000003ff0381c38003800380038003800000000000000", "0000000000000000000000000ffc380038000ff8000e000e1ff8000000000000",
            "0000000001c001c001c001c01ffc01c001c001c001c001c001c0000000000000", "000000000000000000000000381c381c381c381c381c381c0ffc000000000000",
            "000000000000000000000000700e381c1c380e7007e003c00180000000000000", "000000000000000000000000380e380e380e39ce3bee1f7c0e38000000000000",
            "0000000000000000000000001c380e7007e003c007e00e701c38000000000000", "000000000000000000000000380e1c1c0e38077003e001c0038007000e000000",
            "0000000000000000000000003ffe001c007001c007001c003ffe000000000000", "0000000000f801c00380038003801e0003800380038001c000f8000000000000",
            "0000000001c001c001c001c001c0000001c001c001c001c001c0000000000000", "000000001f00038001c001c001c0007801c001c001c003801f00000000000000",
            "00000000079e3cf0000000000000000000000000000000000000000000000000", "000000000000000001c007701c1c700770077fff000000000000000000000000"
        ]
    },

};


function buildFont(name) {
    var glyphs = {};
    var font = FONTS[name].glyphs;
    var width = FONTS[name].width;
    function toBinary(x)
    {
        var bin = parseInt(x, 16).toString(2);
        return "0".repeat(width - bin.length) + bin;
    }
    for (var i=0; i < font.length; ++i) {
        // split into two-hexit substrings, convert each to binary
        var glyph;
        // we can handle 8-bit wide and 16-bit wide
        // 9-bit is 8-bit plus empty space
        if (width <= 9) glyph = font[i].match(/.{1,2}/g).map(toBinary);
        else glyph = font[i].match(/.{1,4}/g).map(toBinary);
        // convert to list of booleans
        glyphs[String.fromCharCode(32+i)] = glyph.map( function(y) { return y.split("").map(function(x) { return x === "1"; }); });
    }
    return glyphs;
}

///////////////////////////////////////////////////////////////////////////////
// tokens

function SeparatorToken(bracket_char)
{
    this.token_type = bracket_char;
    this.payload = bracket_char;
}

function LiteralToken(value)
{
    this.token_type = "literal";
    this.operation = function opLiteral(x) { return x; };
    this.payload = value;
}

function NameToken(value)
{
    this.token_type = "name";
    this.payload = value;
}

function newFunctionToken(keyword, operation) {
    return (function() {
        return {
            "token_type": "function",
            "payload": keyword,
            "operation": operation,
        };
    } );
}
function newStatementToken(keyword, operation) {
    return (function() {
        return {
            "token_type": "statement",
            "payload": keyword,
            "operation": operation,
        };
    } );
}
function newOperatorToken(keyword, narity, precedence, operation) {
    return (function() {
        return {
            "token_type": "operator",
            "payload": keyword,
            "narity": narity,
            "precedence": precedence,
            "operation": operation,
        };
    } );
}

var SYMBOLS = {
    "^": newOperatorToken("^", 2, 12, Math.pow),
    "*": newOperatorToken("*", 2, 11, opMultiply),
    "/": newOperatorToken("/", 2, 11, opDivide),
    "+": newOperatorToken("+", null, 8, opPlus),
    "-": newOperatorToken("-", null, 8, opMinus),
    "=": newOperatorToken("=", 2, 7, opEqual),
    ">": newOperatorToken(">", 2, 7, opGreaterThan),
    ">=": newOperatorToken(">=", 2, 7, opGreaterThanOrEqual),
    "<": newOperatorToken("<", 2, 7, opLessThan),
    "<=": newOperatorToken("<=", 2, 7, opLessThanOrEqual),
    "<>": newOperatorToken("<>", 2, 7, opNotEqual),
};

var KEYWORDS = {
    "ABS": newFunctionToken("ABS", fnAbs),
    "AND": newOperatorToken("AND", 2, 5, opAnd),
    "ASC": newFunctionToken("ASC", fnAsc),
    "ATN": newFunctionToken("ATN", fnAtan),
    "CHR$": newFunctionToken("CHR$", fnChr),
    "COS": newFunctionToken("COS", fnCos),
    "DIM": newStatementToken("DIM", stDim),
    "EXP": newFunctionToken("EXP", fnExp),
    "INPUT": newStatementToken("INPUT", stInput),
    "INT": newFunctionToken("INT", fnInt),
    "LEFT$": newFunctionToken("LEFT$", fnLeft),
    "LEN": newFunctionToken("LEN", fnLen),
    "LET": newStatementToken("LET", stLet),
    "LOG": newFunctionToken("LOG", fnLog),
    "MID$": newFunctionToken("MID$", fnMid),
    "NOT": newOperatorToken("NOT", 1, 6, opNot),
    "OR": newOperatorToken("OR", 2, 4, opOr),
    "PRINT": newStatementToken("PRINT", stPrint),
    "READ": newStatementToken("READ", stRead),
    "RESTORE": newStatementToken("RESTORE", stRestore),
    "RIGHT$": newFunctionToken("RIGHT$", fnRight),
    "SGN": newFunctionToken("SGN", fnSgn),
    "SIN": newFunctionToken("SIN", fnSin),
    "SQR": newFunctionToken("SQR", fnSqr),
    "TAB": newFunctionToken("TAB", fnTab),
    "TAN": newFunctionToken("TAN", fnTan),
    "VAL": newFunctionToken("VAL", fnVal),
    // declarations with no runtime effect
    "DATA": newStatementToken("DATA", null),
    "DEF": newStatementToken("DEF", null),
    "REM": newStatementToken("REM", null),
    // Flow statements are handled by a special node, not a statement operation
    "FOR": newStatementToken("FOR", null),
    "GOSUB": newStatementToken("GOSUB", null),
    "GOTO": newStatementToken("GOTO", null),
    "IF": newStatementToken("IF", null),
    "ON": newStatementToken("ON", null),
    "NEXT": newStatementToken("NEXT", null),
    "RETURN": newStatementToken("RETURN", null),
    "END": newStatementToken("END", null),
    "STOP": newStatementToken("STOP", null),
    "RUN":  newStatementToken("RUN", null),
    // non-statement keywords
    "THEN": newStatementToken("THEN", null),
    "STEP": newStatementToken("STEP", null),
    "TO": newStatementToken("TO", null),
    "FN": newFunctionToken("FN", fnFn),
};

// additional reserved words: AS, AT, GR, LN, PI, ST, TI, TI$


///////////////////////////////////////////////////////////////////////////////
// lexer


function Lexer(expr_string)
// convert expression string to list of tokens
{
    var pos = 0;

    function isNumberChar(char)
    {
        return (char >= "0" && char <= "9");
    }

    function isAlphaChar(char)
    {
        return (char >= "a" && char <= "z") || (char >= "A" && char <= "Z");
    }

    function readString()
    // read a double-quoted string literal
    {
        var start_pos = pos;
        // skip start and closing quotes
        for (++pos; (pos < expr_string.length && expr_string[pos] !== '"'  && expr_string[pos] !== "\n"); ++pos);
        var output = expr_string.slice(start_pos+1, pos);
        if (expr_string[pos] === "\n") {
            console.log("String literal terminated by end-of-line");
            --pos;
        }
        return output;
    }

    function readComment()
    // read a comment until end of line
    {
        // skip single space after REM, if any
        var start_pos = ++pos;
        for (; (pos < expr_string.length && expr_string[pos] !== "\n"); ++pos);
        --pos;
        if (expr_string[start_pos] === " ") ++start_pos;
        return expr_string.slice(start_pos, pos+1);
    }


    function readName()
    // read a name (variable or keyword)
    {
        var start_pos = pos;
        for (; pos < expr_string.length-1; ++pos){
            // the name can end in at most one $
            if (expr_string[pos+1] === "$") {
                ++pos;
                break;
            }
            if (expr_string.slice(start_pos, pos+1).toUpperCase() in KEYWORDS) {
                // names can not start with a keyword; so if we match a keyword it is the name
                break;
            }
            // names cannot contain a keyword; keywords at least length 2
            // look back from end and return everything *up to* the keyword
            // at least length 1, we've just checked for the length-0 case
            var found = false;
            for (var length=2; length < pos - start_pos; ++length) {
                if (expr_string.slice(pos-length, pos+1).toUpperCase() in KEYWORDS) {
                    pos -= length+1;
                    found = true;
                    break;
                }
            }
            if (found) break;
            if (!isAlphaChar(expr_string[pos+1]) && !isNumberChar(expr_string[pos+1])) break;
        }
        return expr_string.slice(start_pos, pos+1).toUpperCase();
    }

    function readInteger()
    // read an unsigned integer literal (i.e. a string of numbers)
    {
        var start_pos = pos;
        for (; pos < expr_string.length-1; ++pos){
            if (!isNumberChar(expr_string[pos+1])) break;
        }
        return expr_string.slice(start_pos, pos+1);
    }

    this.readValue = function()
    {
        // for VAL(), we should also accept a - here
        var sign = "";
        var mantissa = "0";
        var decimal = "0";
        var exponent = "0";
        if (expr_string[pos] === "-") {
            sign = "-";
            ++pos;
        }
        else if (expr_string[pos] === "+") {
            ++pos;
        }
        var char = expr_string[pos];
        if (isNumberChar(char)) {
            mantissa = readInteger();
        }
        else {
            --pos;
        }
        if (pos+1 < expr_string.length && expr_string[pos+1] === ".") {
            ++pos;
            if (pos+1 < expr_string.length && isNumberChar(expr_string[pos+1])) {
                ++pos;
                decimal = readInteger();
            }
        }
        if (pos+1 < expr_string.length && (expr_string[pos+1] === "E" || expr_string[pos+1] === "e")) {
            ++pos;
            if (pos+1 < expr_string.length &&
                    (isNumberChar(expr_string[pos+1]) || expr_string[pos+1] === "-" || expr_string[pos+1] === "+")) {
                if (expr_string[pos+1] === "-" || expr_string[pos+1] === "+") {
                    exponent = expr_string[pos+1];
                    ++pos;
                }
                ++pos;
                exponent += readInteger();
            }
        }
        return parseFloat(sign + mantissa + "." + decimal + "e" + exponent);
    };

    this.tokenise = function()
    {
        // start with a line break to get the parser to expect a line number
        var expr_list = [new SeparatorToken("\n")];
        var isAtLineStart = true
        for (pos=0; pos < expr_string.length; ++pos) {
            var char = expr_string[pos];
            // deal with line breaks, CR, LF and CR LF all work
            if (char === "\r") {
                if (pos+1 < expr_string.length && expr_string[pos+1] === "\n") {
                    ++pos;
                }
                char = "\n";
            }
            if (isAtLineStart && isNumberChar(char))
            {
                var lineNumber = readInteger();
                expr_list.push(new LiteralToken(parseInt(lineNumber)));
            }
            else if (char in SYMBOLS) {
                var operator = char;
                // two-symbol operators all start with lt or gt
                if (char == "<" || char == ">") {
                    if (pos+1 < expr_string.length) {
                        var char2 = expr_string[pos+1];
                        if (char2 == "<" || char2 == ">" || char2 == "=") {
                            operator += char2;
                            ++pos;
                        }
                    }
                }
                expr_list.push(SYMBOLS[operator]());
            }
            else if (char === "(" || char === ")" ||
                        char === "," || char === ";" ||
                        char === ":" || char === "\n") {
                expr_list.push(new SeparatorToken(char));
            }
            // double quotes, starts a string
            else if (char === '"') {
                expr_list.push(new LiteralToken(readString()));
            }
            // numeric character, starts a number literal
            else if (isNumberChar(char) || char === ".") {
                expr_list.push(new LiteralToken(this.readValue()));
            }
            else if (isAlphaChar(char)) {
                var name = readName();
                if (name in KEYWORDS) {
                    // call function that calls new on a constructor
                    expr_list.push(KEYWORDS[name]());
                    if (name === "REM") {
                        expr_list.push(new LiteralToken(readComment()));
                    }
                }
                else {
                    expr_list.push(new NameToken(name));
                }
            }
            else if (char !== " ") {
                // we can't throw here in case there's subroutines<1000 attached
                expr_list.push(new SeparatorToken(char));
                console.log("Unexpected symbol `"+ char + "` during lexing");
            }
            isAtLineStart = (char === "\n") || (isAtLineStart && (char === " "));
        }
        expr_list.push(new SeparatorToken("\n"));
        return expr_list;
    };
}



///////////////////////////////////////////////////////////////////////////////
// AST


function Literal(value)
// literal node holds a string or number value
// only for use in expressions, so no step() or next needed
{
    this.value = value;
    this.evaluate = function() { return this.value; };
}

function Node(func, node_args, program)
// used as expression or statement node
{
    this.func = func;
    this.args = node_args;
    this.next = null;
    this.program = program;

    // traverse AST to evaluate this node and all its subnodes
    this.evaluate = function()
    {
        // evaluate all arguments
        var args = this.args.map(function (x) { return x.evaluate(); });
        // call the function with the array supplied as arguments
        return this.func.apply(this.program, args);
    };

    this.step = function()
    {
        this.evaluate();
        return this.next;
    };
}

// flow nodes

function Label(label)
// label node: no-op but can be a jump target
{
    this.label = label;
    this.next = null;
    this.step = function() {
        return this.next;
    };
}

function End()
{
    this.next = null;
    this.step = function() { return null; };
}

function Run(program)
{
    this.next = null;

    this.step = function() {
        subClear.apply(program);
        return program.tree;
    };
}

function Conditional(condition)
{
    this.condition = condition;
    this.branch = null;
    this.next = null;

    this.step = function()
    {
        if (this.condition.evaluate()) return this.branch;
        return this.next;
    };
}

function Switch(condition, branches)
// ON node
{
    this.condition = condition;
    this.branches = branches;
    this.next = null;

    this.step = function()
    {
        var condition = this.condition.evaluate();
        if (typeof condition !== "number" && typeof condition !== "boolean") {
            throw new BasicError("Type mismatch", "expected numerical expression, got `"+ condition+"`");
        }
        if (condition > 0 && condition <= this.branches.length) {
            return this.branches[condition-1];
        }
        else {
            return this.next;
        }
    };
}

function Jump(target, program, is_sub)
{
    this.target = target;
    this.next = null;

    this.step = function()
    {
        if (!(target in program.line_numbers)) {
            throw new BasicError("Undefined line number in `GOTO " + target + "`");
        }
        if (is_sub) program.sub_stack.push(this.next);
        return program.line_numbers[target];
    };
}

function Return(program)
// RETURN node
{
    this.step = function()
    {
        return program.sub_stack.pop();
    };
}

function Wait(wait_condition)
// execute node after waiting for condition to become true
// unlike Conditional, the condition is evaluated repeatedy until true
// e.g. wait for a keypress

{
    this.trigger = wait_condition;
    this.next = null;
    this.delay = IDLE_DELAY;

    this.step = function()
    {
        if (this.trigger()) return this.next;
        return this;
    };
}

function For(loop_name, start, stop, incr, program)
{
    this.next = null;

    this.step = function()
    {
        program.variables.assign(start.evaluate(), loop_name, []);
        var for_record = {
            "name": loop_name,
            "next": this.next,
            "stop": stop.evaluate(),
            "incr": incr.evaluate(),
        };
        program.loop_stack.unshift(for_record);
        return this.next;
    };
}

function Next(loop_name, program)
// iteration node
{
    this.next = null;
    this.delay = busy_delay;

    this.step = function()
    {
        var for_record;
        for (;;) {
            for_record = program.loop_stack[0];
            if (for_record === null || for_record === undefined) {
                throw new BasicError("Block error", "`NEXT` without `FOR`");
            }
            if (loop_name === null) loop_name = for_record.name;
            if (loop_name === for_record.name) break;
            // jumping out of loop
            program.loop_stack.shift();
        }
        var loop_var = program.variables.retrieve(loop_name, []);
        var incr = for_record.incr;
        var stop = for_record.stop;
        // iterate if ((i+step)*step) < (stop*step) to deal with negative steps
        if (incr*(loop_var+incr) <= incr*stop) {
            program.variables.assign(loop_var + incr, loop_name, []);
            return for_record.next;
        }
        program.loop_stack.shift();
        return this.next;
    };
}


//////////////////////////////////////////////////////////////////////
// program object

function Program(machine, basicode)
{
    // parsing output
    this.title = "";
    this.description = "";
    this.data = new Data();
    this.fns = new Functions();
    this.line_numbers = {};
    // run clear at the start of each program
    // and again for GOTO 20
    this.tree = new Node(subClear, [], this);
    this.code = basicode;

    // build the tree
    var tokenised_code = new Lexer(basicode).tokenise();
    var parser = new Parser(tokenised_code, this);
    this.error = null;
    try {
        parser.parse(this.tree);
    }
    catch (e) {
        this.error = e;
    }

    // runtime state
    this.variables = new Variables();
    this.sub_stack = [];
    this.loop_stack = [];
    this.current_line = 999;

    this.clear = function()
    {
        this.variables.clear();
        this.data.restore();
        this.sub_stack = [];
        this.current_line = 999;
    };

    // attach program to machine emulator
    this.machine = machine;
}


//////////////////////////////////////////////////////////////////////
// parser


function Parser(expr_list, program)
{
    // current line being parsed
    var current_line = 999;

    function drain(precedence, stack, units)
    // pop operator stack until matching precedence is encountered
    {
        while ((stack.length > 0)) {

            if (precedence > stack[stack.length-1].precedence) {
                break;
            }
            var token = stack.pop();
            var args = units.slice(units.length - token.narity);
            // we need to pop without slicing the units
            // to affect the mutable argument
            for (var i=0; i < args.length; ++i) {
                units.pop();
            }
            units.push(new Node(token.operation, args, program));
        }
        return units;
    }

    this.parseExpression = function(parameter, fn_name)
    // parse expression from a list of tokens to an AST
    // variation of Dijkstra's shunting-yard algorithm, following PC-BASIC
    {
        var stack = [];
        var units = [];
        var token = null;
        var exit_loop = false;
        while (expr_list.length > 0) {
            var last = token;
            token = expr_list.shift();
            if (token.token_type === "operator") {
                // only a unary operator after another operator or at the start
                var narity = 2;
                if (last === null || last.token_type === "operator") {
                    // narity 1: prefix, 2: binary infix
                    // narity null is for - which can be prefix or infix
                    narity = 1;
                }
                if (token.narity !== null && token.narity !== narity) {
                    throw new BasicError("Syntax error", "unexpected operator type", current_line);
                }
                if (narity === 2) {
                    // drain stack until precedence is matched
                    drain(token.precedence, stack, units);
                }
                // (copy and?) override the narity of - before pushing
                token.narity = narity;
                stack.push(token);
            }
            else if (last === null || last.token_type === "operator") {
                var name;
                switch (token.token_type) {
                    case "function":
                        if (token.payload === "FN") name = expr_list.shift();
                        var args = this.parseArguments(parameter, fn_name);
                        if (token.payload === "FN") args.unshift(new Literal(name.payload));
                        units.push(new Node(token.operation, args, program));
                        break;
                    case "(":
                        // recursive call, gets a Node object containing AST
                        units.push(this.parseExpression(parameter, fn_name));
                        var bracket = expr_list.shift(token);
                        if (bracket.token_type !== ")") {
                            throw new BasicError("Syntax error", "expected `)`, got `" + bracket.payload + "`", current_line);
                        }
                        break;
                    case "literal":
                        units.push(new Literal(token.payload));
                        break;
                    case "name":
                        // user function parameter, must not be array element
                        if (parameter !== undefined && token.payload === parameter) {
                            units.push(new Node(opRetrieveParameter, [new Literal(fn_name)], program));
                        }
                        else {
                            var indices = this.parseArguments(parameter, fn_name);
                            units.push(new Node(opRetrieve, [new Literal(token.payload)].concat(indices), program));
                        }
                        break;
                    default:
                        expr_list.unshift(token);
                        exit_loop = true;
                        break;
                }
            }
            else {
                expr_list.unshift(token);
                break;
            }
            if (exit_loop) {
                break;
            }
        }
        drain(0, stack, units);
        if (units.length) return units[0];
        return null;
    };

    this.parseArguments = function(parameter, fn_name)
    {
        var args = [];
        if (expr_list.length > 0 && expr_list[0].token_type === "(") {
            expr_list.shift();
          var token;
            while (expr_list.length > 0) {
                args.push(this.parseExpression(parameter, fn_name));
                token = expr_list.shift();
                if (token.token_type === ")") break;
                if (token.token_type !== ",") {
                    throw  new BasicError("Syntax error", "expected `,`, got `"+token.payload+"`", current_line);
                }
            }
            if (token.token_type !== ")") {
                throw new BasicError("Syntax error", "missing `)`", current_line);
            }
        }
        return args;
    };

    this.parseLineNumber = function(last)
    {
        if (!expr_list.length) return null;
        var token = expr_list.shift();
        var line_number;
        while (expr_list.length) {
            // ignore empty lines
            while (token && (token.token_type === "\n")) token = expr_list.shift();
            if (!token) return null;

            // we do need a line number at the start
            if (token.token_type != "literal") {
                throw new BasicError("Syntax error", "expected line number, got `"+token.payload+"`", current_line);
            }
            //####
            line_number = token.payload;
            // ignore lines < 1000
            if (line_number >= 1000) break;
            while (token.token_type !== "\n") token = expr_list.shift();
        }
        if (line_number <= current_line) {
            throw new BasicError("Syntax error", "expected line number > `" + current_line+"`, got `"+ line_number + "`", current_line);
        }
        current_line = line_number;
        var label = new Label(line_number);
        program.line_numbers[line_number] = label;
        last.next = label;
        return label;
    };

    this.parse = function(last, end_token)
    {
        while (expr_list.length) {
            // parse separator
            if (expr_list[0].token_type !== "literal" && expr_list[0].payload === end_token) break;
            var sep = expr_list.shift();
            if (sep.token_type === "\n") {
                // parseLineNumber deals with multiple LFs
                last.next = this.parseLineNumber(last);
                if (!last.next) break;
                last = last.next;
            }
            else if (sep.token_type !== ":") {
                throw new BasicError("Syntax error", "expected `:`, got `" + sep.payload + "`", current_line);
            }
            if (!expr_list.length) break;
            if (expr_list[0].token_type !== "literal" && expr_list[0].payload === end_token) break;
            // handle empty statement
            if (expr_list[0].token_type === ":" || expr_list[0].token_type === "\n") continue;
            // parse statements
            var token = expr_list.shift();
            // optional LET
            if (token.token_type === "name") {
                expr_list.unshift(token);
                token = KEYWORDS["LET"]();
            }
            // parse arguments in statement-specific way
            // statement parsers must take care of maintaining the linked list
            var parser = PARSERS[token.payload];
            if (parser) {
                last = parser.call(this, token, last);
            }
            else {
                throw new BasicError("Syntax error", "expected statement, got `" + sep.payload + "`", current_line);
            }
        }
        return last;
    };

    ///////////////////////////////////////////////////////////////////////////
    // statement syntax

    this.parseLet = function(token, last)
    // parse LET statement
    {
        var name = expr_list.shift();
        if (name.token_type != "name") {
            throw new BasicError("Syntax error", "expected variable name, got `" + name.payload + "`", current_line);
        }
        var indices = this.parseArguments();
        var equals = expr_list.shift().payload;
        if (equals !== "=") throw new BasicError("Syntax error", "expected `=`, got `"+equals+"`", current_line);
        var value = this.parseExpression();
        // statement must have access to interpreter state, so program is first argument
        last.next = new Node(token.operation, [value, new Literal(name.payload)].concat(indices), program);
        return last.next;
    };

    this.parsePrint = function(token, last_node)
    // parse PRINT statement
    {
        var last = null;
        while (expr_list.length > 0) {
            var expr = this.parseExpression();
            if (expr !== null) {
                last_node.next = new Node(stPrint, [expr], program);
                last_node = last_node.next;
                last = expr;
            }
            else if (expr_list[0].token_type === ",") {
                expr_list.shift();
                last_node.next = new Node(stComma, [], program);
                last_node = last_node.next;
            }
            else if (expr_list[0].token_type !== ";") break;
            if (!expr_list.length) break;
            if (expr_list[0].token_type === ":" || expr_list[0].token_type === "\n") break;
            last = ";";
            if (expr_list[0].token_type === ";") expr_list.shift();
        }
        if (last !== ";") {
            last_node.next = new Node(stPrint, [new Literal("\n")], program);
            last_node = last_node.next;
        }
        return last_node;
    };

    this.parseData = function(token, last)
    // parse DATA statement
    {
        var values = [];
        var neg = false;
        // allow completely empty DATA statements
        if (expr_list[0].token_type === "\n") return last;
        while (expr_list.length > 0) {
            var value = expr_list.shift();
            // only literals allowed in DATA; no empty entries (repeated commas)
            if (value === null || (value.token_type !== "literal" && (neg || (value.token_type !== "operator" || (value.payload !== "-" && value.payload !== "+") )))) {
                throw new BasicError("Syntax error", "expected string or number literal, got `"+value.payload+"`", current_line);
            }
            if (value.token_type === "operator" && value.payload === "-") {
                neg = true;
                continue;
            }
            if (value.token_type === "operator" && value.payload === "+") continue;
            values.push(neg?-value.payload:value.payload);
            neg = false;
            // parse separator (,)
            if (!expr_list.length) break;
            if (expr_list[0].token_type !== ",") break;
            expr_list.shift();
        }
        // data is stored immediately upon parsing, DATA is then a no-op statement
        program.data.store(values);
        return last;
    };

    this.parseRead = function(token, last)
    // parse READ or DIM statement
    {
        while (expr_list.length > 0) {
            var name = expr_list.shift();
            if (name.token_type != "name") {
                throw new BasicError("Syntax error", "expected variable name, got `" + name.payload + "`", current_line);
            }
            var indices = this.parseArguments();

            last.next = new Node(token.operation, [new Literal(name.payload)].concat(indices), program);
            last = last.next;

            if (!expr_list.length) break;
            if (expr_list[0].token_type !== ",") break;
            expr_list.shift();
        }
        return last;
    };

    this.parseRem = function(token, last)
    // parse REM
    {
        var rem = expr_list.shift();
        if (rem.token_type !== "literal") {
            throw new BasicError("Syntax error", "expected literal, got `"+rem.payload+"`", current_line);
        }
        // BASICODE standard: title in REM on line 1000
        // description and copyrights in REMS on lines 30000 onwards
        rem = rem.payload;
        var rem_trim = rem.trim();
        if (rem_trim[0] === '"') {
            rem = rem_trim.slice(1);
            if (rem[rem.length-1] === '"') rem = rem.slice(0, rem.length-1);
        }
        if (current_line === 1000) {
            program.title = rem.trim();
        }
        else if (current_line >= 30000) {
            program.description += rem + "\n";
        }
        return last;
    };

    this.parseGoto = function(token, last)
    // parse GOTO
    {
        var line_number = expr_list.shift();
        if (line_number.token_type !== "literal" || typeof line_number.payload !== "number") {
            throw new BasicError("Syntax error", "expected line number, got `"+line_number.payload+"`", current_line);
        }
        // GOTO 20 is a BASICODE fixture, clear and jump to 1010
        // GOTO 950 means END
        if (line_number.payload === 20 || line_number.payload === 950) {
            return SUBS[line_number.payload](last);
        }
        else if (line_number.payload in SUBS) {
            last = SUBS[line_number.payload](last);
            // GOTO basicode routine == GOSUB basicode routine and then RETURN
            last.next = new Return(program);
            return last.next;
        }
        else if (line_number.payload < 1000) {
            // do not throw error during parsing, Jump will throw at runtime
            console.log("Incorrect or unimplemented BASICODE routine `GOTO "+line_number.payload+"`");
        }
        // other line numbers are resolved at run time
        last.next = new Jump(line_number.payload, program, false);
        // put a short delay on jumps to avoid overloading the browser on loops
        last.next.delay = busy_delay;
        return last.next;
    };

    this.parseGosub = function(token, last)
    // parse GOSUB
    {
        var line_number = expr_list.shift();
        if (line_number.token_type !== "literal" || typeof line_number.payload !== "number") {
            throw new BasicError("Syntax error", "expected line number, got `"+line_number.payload+"`", current_line);
        }
        else if (line_number.payload in SUBS) {
            // attach BASICODE subroutine node
            return SUBS[line_number.payload](last);
        }
        else if (line_number.payload < 1000) {
            // do not throw error during parsing, Jump will throw at runtime
            console.log("Incorrect or unimplemented BASICODE routine `GOSUB "+line_number.payload+"`");
        }
        last.next = new Jump(line_number.payload, program, true);
        return last.next;
    };

    var SUBS = {
        100: function(last) {last.next = new Node(subClearScreen, [], program); return last.next; },
        110: function(last) {last.next = new Node(subSetPos, [], program); return last.next; },
        120: function(last) {last.next = new Node(subGetPos, [], program); return last.next; },
        150: function(last) {last.next = new Node(subWriteBold, [], program); return last.next; },
        200: function(last) {last.next = new Node(subReadKey, [], program); return last.next; },
        210: function(last) {
            last.next = new Wait(function waitForKey() { return program.machine.keyboard.keyPressed(); });
            last.next.next = new Node(subReadKey, [], program);
            return last.next.next;
        },
        220: function(last) {last.next = new Node(subReadChar, [], program); return last.next; },
        250: function(last) {
            last.next = new Node(subBeep, [], program);
            last.next.next = new Wait(function waitForTone() { return !program.machine.speaker.isBusy(); });
            return last.next.next;
        },
        260: function(last) {last.next = new Node(subRandom, [], program); return last.next; },
        270: function(last) {last.next = new Node(subFree, [], program); return last.next; },
        280: function(last) {last.next = new Node(subToggleBreak, [], program); return last.next; },
        300: function(last) {last.next = new Node(subNumberToString, [], program); return last.next; },
        310: function(last) {last.next = new Node(subNumberFormat, [], program); return last.next; },
        330: function(last) {last.next = new Node(subToUpperCase, [], program); return last.next; },
        350: function(last) {last.next = new Node(subLinePrint, [], program); return last.next; },
        360: function(last) {last.next = new Node(subLineFeed, [], program); return last.next; },
        400: function(last) {
            last.next = new Node(subTone, [], program);
            last.next.next = new Wait(function waitForTone() { return !program.machine.speaker.isBusy(); });
            return last.next.next;
        },
        450: function(last) {
            last.next = new Node(subSetTimer, [], program);
            last.next.next = new Wait(function waitForKeyWithTimeout() { return (program.machine.keyboard.keyPressed() || program.machine.timer.elapsed()); });
            last.next.next.next = new Node(subReadKeyGetTimer, [], program);
            return last.next.next.next;
        },
        500: function(last) {last.next = new Node(subOpen, [], program); return last.next; },
        540: function(last) {last.next = new Node(subReadFile, [], program); return last.next; },
        560: function(last) {last.next = new Node(subWriteFile, [], program); return last.next; },
        580: function(last) {last.next = new Node(subClose, [], program); return last.next; },
        600: function(last) {last.next = new Node(subClearScreen, [], program); return last.next; },
        620: function(last) {last.next = new Node(subPlot, [], program); return last.next; },
        630: function(last) {last.next = new Node(subDraw, [], program); return last.next; },
        650: function(last) {last.next = new Node(subText, [], program); return last.next; },
        // GOSUB 950 (unofficial) same as GOTO 950
        950: function(last) {last.next = new End(); return last.next; },
        // GOSUB 20 (unofficial) same as GOTO 20
        20 : function(last){
            last.next = new Node(subClear, [], program);
            last.next.next = new Jump(1010, program, false);
            return last.next.next;
        }
    };

    this.parseIf = function(token, last)
    // parse IF
    {
        var condition = this.parseExpression();
        var node = new Conditional(condition);
        last.next = node;
        var then = expr_list.shift();
        if (then.token_type !== "statement" || (then.payload !== "THEN" && then.payload !== "GOTO")) {
            throw new BasicError("Syntax error", "expected `THEN`, got `"+then.payload+"`", current_line);
        }
        // supply a GOTO if jump target given after THEN
        var jump = expr_list[0];
        if (jump.token_type === "literal") {
            expr_list.unshift(KEYWORDS["GOTO"]());
        }
        node.branch = new Label("THEN");
        node.next = new Label("FI");
        expr_list.unshift(new SeparatorToken(":"));
        var end_branch = this.parse(node.branch, "\n");
        end_branch.next = node.next;
        // give back the separator so the next line parses correctly
        expr_list.unshift(new SeparatorToken("\n"));
        // merge branch back into single node
        return node.next;
    };

    this.parseOn = function(token, last)
    // parse ON jumps
    {
        var condition = this.parseExpression();
        var jump = expr_list.shift();
        if (jump.token_type !== "statement" || (jump.payload !== "GOTO" && jump.payload !== "GOSUB")) {
            throw new BasicError("Syntax error", "expected `GOTO` or `GOSUB`, got `"+jump.payload+"`", current_line);
        }
        // target for RETURN and switch fallthrough
        var label = new Label("NO");
        var nodes = [];
        while (expr_list.length) {
            // create jump node of the right kind, and attach to a dummy object
            var node = PARSERS[jump.payload].call(this, jump, {});
            node.next = label;
            nodes.push(node);
            var sep = expr_list.shift();
            if (sep.token_type !== ",") {
                expr_list.unshift(sep);
                break;
            }
        }
        last.next = new Switch(condition, nodes);
        last.next.next = label;
        return label;
    };

    this.parseFor = function(token, last)
    // parse FOR
    {
        var loop_variable = expr_list.shift();
        if (loop_variable.token_type !== "name" || loop_variable.payload.slice(-1) === "$") {
            throw new BasicError("Syntax error", "expected numerical variable name, got `"+loop_variable.payload+"`", current_line);
        }
        loop_variable = loop_variable.payload;
        var equals = expr_list.shift();
        if (equals.token_type !== "operator" || equals.payload !== "=") {
            throw new BasicError("Syntax error", "expected `=`, got `"+equals.payload+"`", current_line);
        }
        var start = this.parseExpression();
        var to = expr_list.shift();
        if (to.token_type !== "statement" || to.payload !== "TO") {
            throw new BasicError("Syntax error", "expected `TO`, got `"+to.payload+"`", current_line);
        }
        var stop = this.parseExpression();
        var step = expr_list.shift();
        if (step.token_type !== "statement" || step.payload !== "STEP") {
            expr_list.unshift(step);
            step = new Literal(1);
        }
        else {
            step = this.parseExpression();
        }
        // loop init
        last.next = new For(loop_variable, start, stop, step, program);
        last = last.next;
        return last;
    };

    this.parseNext = function(token, last)
    // regular NEXT
    {
        // only one variable allowed
        var next_variable = expr_list.shift();
        // accept missing variable name (formally not allowed)
        if (next_variable.token_type === "name") {
            next_variable = next_variable.payload;
        }
        else {
            expr_list.unshift(next_variable);
            next_variable = null;
        }
        // create the iteration node
        last.next = new Next(next_variable, program);
        // replace NEXT J,I with NEXT J: NEXT I
        if (expr_list[0].token_type === ",") {
            expr_list.shift();
            expr_list.unshift(KEYWORDS["NEXT"]());
            expr_list.unshift(new SeparatorToken(":"));
        }
        return last.next;
    };

    this.parseInput = function(token, last)
    // parse INPUT
    {
        var prompt = "? ";
        // allow a prompt string literal
        if ((expr_list[0].token_type === "literal") && (typeof expr_list[0].payload === "string")) {
            prompt = expr_list.shift().payload + "? ";
            var semicolon = expr_list.shift();
            if (semicolon.token_type !== ";") {
                throw new BasicError("Syntax error", "expected `;`, got `"+semicolon.payload+"`", current_line);
            }
        }
        // prompt
        last.next = new Node(stPrint, [new Literal(prompt)], program);
        last = last.next;
        // creator function is necessary doe to lexical scoping - if not, we'd be looking at the last `comma` whcih is always false
        var createWait = function(break_on_comma) {
            return function() {
              return program.machine.keyboard.interact(program.machine.display, break_on_comma);
            };
        };
        var comma;
        do {
            var name = expr_list.shift();
            if (name.token_type !== "name") {
                throw new BasicError("Syntax error", "expected variable name, got `" + name.payload + "`", current_line);
            }
            var indices = this.parseArguments();
            comma = null;
            if (expr_list[0].token_type === ",") comma = expr_list.shift();
            // wait for ENTER or comma keypress before engaging
            last.next = new Wait(createWait(comma !== null));
            // do not retrieve the variable, just get its name
            last.next.next = new Node(stInput, [new Literal(name.payload)].concat(indices), program);
            last = last.next.next;
        } while (comma);
        return last;
    };

    this.parseDefFn = function(token, last)
    // parse DEF FN statement
    {
        var fn = expr_list.shift();
        if (fn.token_type !== "function" || fn.payload !== "FN") {
            throw new BasicError("Syntax error", "expected `FN`, got `"+fn.payload+"`", current_line);
        }
        var name = expr_list.shift();
        if (name.token_type !== "name") {
            throw new BasicError("Syntax error", "expected function name, got `" + name.payload + "`", current_line);
        }
        token = expr_list.shift();
        if (token.token_type !== "(") {
            throw new BasicError("Syntax error", "expected `(`, got `"+token.payload+"`", current_line);
        }
        var arg = expr_list.shift();
        if (name.token_type !== "name") {
            throw new BasicError("Syntax error", "expected parameter name, got `" + arg.payload + "`", current_line);
        }
        token = expr_list.shift();
        if (token.token_type !== ")") {
            throw new BasicError("Syntax error", "expected `)`, got `"+token.payload+"`", current_line);
        }
        var equals = expr_list.shift().payload;
        if (equals !== "=") throw new BasicError("Syntax error", "expected `=`, got `"+equals+"`", current_line);
        var expr = this.parseExpression(arg.payload, name.payload);
        program.fns.store(name.payload, arg, expr);
        return last;
    };

    this.parseRestore = function(token, last)
    // parse RESTORE
    {
        last.next = new Node(token.operation, [], program);
        return last.next;
    };

    this.parseReturn = function(token, last)
    // parse RETURN
    {
        last.next = new Return(program);
        return last.next;
    };

    this.parseEnd = function(token, last)
    // parse END
    {
        last.next = new End();
        return last.next;
    };

    this.parseRun = function(token, last)
    // parse RUN
    {
        last.next = new Run(program);
        return last.next;
    };

    var PARSERS = {
        "DATA": this.parseData,
        "DIM": this.parseRead,
        "FOR": this.parseFor,
        "GOSUB": this.parseGosub,
        "GOTO": this.parseGoto,
        "IF": this.parseIf,
        "INPUT": this.parseInput,
        "LET": this.parseLet,
        "NEXT": this.parseNext,
        "ON": this.parseOn,
        "PRINT": this.parsePrint,
        "READ": this.parseRead,
        "REM": this.parseRem,
        "RESTORE": this.parseRestore,
        "RETURN": this.parseReturn,
        "END": this.parseEnd,
        "STOP": this.parseEnd,
        "RUN": this.parseRun,
        "DEF": this.parseDefFn,
    };
}


///////////////////////////////////////////////////////////////////////////////
// data store

function Data()
{
    this.vault = [];
    this.pointer = 0;

    this.read = function()
    {
        if (this.pointer < this.vault.length) return this.vault[this.pointer++];
        else throw new BasicError("Out of Data", "", null);
    };

    this.restore = function()
    {
        this.pointer = 0;
    };

    this.store = function(new_data)
    {
        this.vault = this.vault.concat(new_data);
    };

    this.clear = function()
    {
        this.vault = [];
        this.pointer = 0;
    };

}


///////////////////////////////////////////////////////////////////////////////
// types, variables, arrays

function defaultValue(name)
// default value for type given by name
{
    var default_value = 0;
    if (name.slice(-1) === "$") default_value = "";
    return default_value;
}

function matchType(name, value)
{
    var string_name = (name.slice(-1) === "$");
    var string_value = typeof value === "string";
    if (!string_value && typeof value !== "number") {
        throw new BasicError("Type mismatch" , "unknown type `"+typeof value+"`", null);
    }
    if (string_name !== string_value) {
        throw new BasicError("Type mismatch" , "", null);
    }
}

function equalType(left, right)
{
    if (typeof(left) !== typeof(right)) {
        throw new BasicError("Type mismatch" , "", null);
    }
}


function Variables()
{
    this.clear = function()
    {
        this.arrays = {};
        this.scalars = {};
        this.dims = {};
    };

    this.allocate = function(name, indices)
    // allocate an array
    {
        // no redefinitions allowed
        if (name in this.dims || name in this.arrays) {
            // ignore redefinitions of basicode-3c colour array, for compatibility
            if (name == "CC") return;
            throw new BasicError("Duplicate definition", "`"+name+"()` was previously dimensioned", null);
        }
        // BASICODE arrays may have at most two indices
        //if (indices.length > 2) throw new BasicError("Subscript out of range", "too many array dimensions", null);
        // set default to empty string if string name, 0 otherwise
        var default_value = defaultValue(name);
        function allocateLevel(indices) {
            if (indices.length === 0) return default_value;
            else {
                // allocate subarray; BASICODE arrays span 0..x inclusive
                equalType(0, indices[0]);
                if (indices[0] <= 0) throw new BasicError("Illegal function call", "", null);
                var arr = new Array(Math.round(indices[0])+1);
                // feed remaining arguments to recursive call
                var argarray = indices.slice(1);
                // allocate deeper level
                for (var i=0; i < arr.length; ++i) {
                    arr[i] = allocateLevel(argarray);
                }
                return arr;
            }
        }

        // I"m assuming a name is *either* a scalar *or* an array
        // this is not true in e.g. GW-BASIC, but I think it's true in BASICODE
        this.dims[name] = indices;
        this.arrays[name] = allocateLevel(indices);
    };

    this.checkSubscript = function(name, indices)
    {
        var i;
        if (!indices.length) {
            if (!(name in this.dims) && !(name in this.scalars)) {
                this.scalars[name] = defaultValue(name);
            }
        }
        else if (!(name in this.dims)) {
            //throw new BasicError("Subscript out of range", "array was not dimensioned", null);
            // auto-dim array at 10 for each index
            var new_indices = [];
            for (i=0; i < indices.length; ++i) {
                new_indices.push(10);
            }
            console.log("Auto-allocating array "+name+" with "+new_indices.length+" indices.");
            this.allocate(name, new_indices);
        }
        else if (indices.length !== this.dims[name].length) {
            throw new BasicError("Subscript out of range" , "expected "+this.dims[name].length+" indices, got "+indices.length, null);
        }
        else {
            for (i=0; i < indices.length; ++i) {
                if (indices[i] < 0 || indices[i] > this.dims[name][i]) {
                    throw new BasicError("Subscript out of range", "indices "+indices+" out of bounds "+this.dims[name], null);
                }
            }
        }
    };

    this.assign = function(value, name, indices)
    // set a variable
    {
        this.checkSubscript(name, indices);
        matchType(name, value);
        if (indices.length === 0) {
            this.scalars[name] = value;
        }
        else if (indices.length === 1) {
            this.arrays[name][Math.round(indices[0])] = value;
        }
        else {
            this.arrays[name][Math.round(indices[0])][Math.round(indices[1])] = value;
        }
    };

    this.retrieve = function(name, indices)
    // retrieve a variable
    {
        this.checkSubscript(name, indices);

        if (indices.length === 0) {
            return this.scalars[name];
        }
        else if (indices.length === 1) {
            return this.arrays[name][Math.round(indices[0])];
        }
        else {
            return this.arrays[name][Math.round(indices[0])][Math.round(indices[1])];
        }
    };

    this.clear();
}


function Functions()
{
    this.clear = function()
    {
        this.exprs = {};
        this.args = {};
    };

    this.store = function(name, arg, expr)
    {
        this.exprs[name] = expr;
    };

    this.evaluate = function(name, arg_value)
    {
        this.args[name] = arg_value;
        return this.exprs[name].evaluate();
    };

    this.clear();
}


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// operations, statements, functions

// we set `this` to the current program state upon calling these

function opMultiply(x, y)
{
    equalType(0, x);
    equalType(0, y);
    return x * y;
}

function opDivide(x, y)
{
    equalType(0, x);
    equalType(0, y);
    if (y === 0) throw new BasicError("Division by Zero", "", null);
    return x / y;
}

function opPlus(x, y)
// + adds numbers or concatenates strings; unary plus leaves unchanged
{
    if (y === undefined) {
        equalType(0, x);
        return x;
    }
    else {
        equalType(x, y);
        return x + y;
    }
}

function opMinus(x, y)
// - can be unary negation or binary subtraction
{
    equalType(0, x);
    if (y === undefined) {
        return -x;
    }
    else {
        equalType(0, y);
        return x - y;
    }
}

function opEqual(x, y)
{
    equalType(x, y);
    return -(x === y);
}

function opGreaterThan(x, y)
{
    equalType(x, y);
    return -(x > y);
}

function opGreaterThanOrEqual(x, y)
{
    equalType(x, y);
    return -(x >= y);
}

function opLessThan(x, y)
{
    equalType(x, y);
    return -(x < y);
}

function opLessThanOrEqual(x, y)
{
    equalType(x, y);
    return -(x <= y);
}

function opNotEqual(x, y)
{
    equalType(x, y);
    return -(x !== y);
}

function opAnd(x, y)
{
    equalType(0, x);
    equalType(0, y);
    return (x & y);
}

function opNot(x)
{
    equalType(0, x);
    return (~x);
}

function opOr(x, y)
{
    equalType(0, x);
    equalType(0, y);
    return (x | y);
}

function opRetrieveParameter(fn_name)
// retrieve the user function parameter (only one allowed, no arrays)
{
    return this.fns.args[fn_name];
}

function opRetrieve(name)
//  retrieve a variable from the Variables object in program (this)
{
    var indices = [].slice.call(arguments, 1);
    var value = this.variables.retrieve(name, indices);
    return value;
}



function fnTab(x)
// set column to a given position during PRINT
// outside of PRINT, this is not allowed
// but we"re not throwing any errors
{
    equalType(0, x);
    this.machine.display.setColumn(x);
    return "";
}

function stComma()
// jump to next tab stop during print
// nothing like a function, but kind of related to TAB
{
    this.machine.display.setColumn(8*Math.ceil(this.machine.display.col/8));
}


function fnAbs(x)
{
    equalType(0, x);
    return Math.abs(x);
}

function fnAsc(x)
{
    equalType("", x);
    if (x === "") throw new BasicError("Illegal function call", "", null);
    return x.charCodeAt(0);
}

function fnAtan(x)
{
    equalType(0, x);
    return Math.atan(x);
}

function fnChr(x)
{
    equalType(0, x);
    if (x<0 || x > 255) throw new BasicError("Illegal function call", "", null);
    return String.fromCharCode(x);
}

function fnCos(x)
{
    equalType(0, x);
    return Math.cos(x);
}

function fnExp(x)
{
    equalType(0, x);
    return Math.exp(x);
}

function fnInt(x)
{
    equalType(0, x);
    return Math.trunc(x);
}

function fnLog(x)
{
    equalType(0, x);
    if (x <= 0) throw new BasicError("Illegal function call", "", null);
    return Math.log(x);
}

function fnSgn(x)
{
    equalType(0, x);
    return Math.sign(x);
}

function fnSin(x)
{
    equalType(0, x);
    return Math.sin(x);
}

function fnSqr(x)
{
    equalType(0, x);
    if (x < 0) throw new BasicError("Illegal function call", "", null);
    return Math.sqrt(x);
}

function fnTan(x)
{
    equalType(0, x);
    return Math.tan(x);
}


function fnMid(x, start, n)
{
    equalType("", x);
    equalType(0, start);
    if (n === undefined) return x.slice(start-1);
    equalType(0, n);
    if (n === 0) return "";
    if (n < 0) throw new BasicError("Illegal function call", "", null);
    return x.slice(start-1, start+n-1);
}

function fnLeft(x, n)
{
    equalType("", x);
    equalType(0, n);
    if (n === 0) return "";
    if (n < 0) throw new BasicError("Illegal function call", "", null);
    return x.slice(0, n);
}

function fnRight(x, n)
{
    equalType("", x);
    equalType(0, n);
    if (n === 0) return "";
    if (n < 0) throw new BasicError("Illegal function call", "", null);
    return x.slice(-n);
}

function fnLen(x)
{
    equalType("", x);
    return x.length;
}

function fnVal(x)
{
    equalType("", x);
    return new Lexer(x).readValue();
}

function fnFn(name, x)
{
    return this.fns.evaluate(name, x);
}


///////////////////////////////////////////////////////////////////////////////
// statements


function stLet(value, name)
// LET
{
    var indices = [].slice.call(arguments, 2);
    this.variables.assign(value, name, indices);
}

function stDim(name)
// DIM
{
    var indices = [].slice.call(arguments, 1);
    this.variables.allocate(name, indices);
}

function stPrint(value)
// PRINT value;
{
    if (typeof value === "string") {
        this.machine.display.write(value);
    }
    else if (value < 0) {
        this.machine.display.write(value.toString(10) + " ");
    }
    else {
        this.machine.display.write(" " + value.toString(10) + " ");
    }
}

function stRestore()
// RESTORE
{
    this.data.restore();
}

function stRead(name)
// READ
{
    var indices = [].slice.call(arguments, 1);
    var value = this.data.read();
    // convert numbers to strings, but not the other way around
    if (name.slice(-1) === "$" && typeof value !== "string") {
        value = value.toString(10);
    }
    matchType(name, value);
    this.variables.assign(value, name, indices);
}

function stInput(name)
// INPUT
{
    var indices = [].slice.call(arguments, 1);
    var value = this.machine.keyboard.readLine();
    if (name.slice(-1) !== "$") {
        // convert string to number
        // note that this will currently simply return 0 if it can't convert
        // no "Redo from start"
        value = new Lexer(value).readValue();
    }
    this.variables.assign(value, name, indices);
}


///////////////////////////////////////////////////////////////////////////////
// BASICODE subroutines and jumps

function subClear()
// GOTO 20
// clear variables
{
    this.clear();
    // basicode-3
    this.variables.assign(this.machine.display.width - 1, "HO", []);
    this.variables.assign(this.machine.display.height - 1, "VE", []);
    this.variables.assign(this.machine.display.pixel_width, "HG", []);
    this.variables.assign(this.machine.display.pixel_height, "VG", []);
    // basicode-3c version identifier
    this.variables.assign(35, "SV", []);
    // basicode-3c colour array
    this.variables.allocate("CC", [10]);
    this.variables.assign(7, "CC", [0]);
    this.variables.assign(0, "CC", [1]);
}

function subClearScreen()
// GOSUB 100, GOSUB 600
// 600 Switch to graphic screen and clear graphic screen
{
    subSetColour.call(this);
    this.machine.display.clear();
}

function subSetPos()
// GOSUB 110
{
    var row = Math.round(this.variables.retrieve("VE", []));
    var col = Math.round(this.variables.retrieve("HO", []));
    if (col < 0) col = 0;
    if (col >= this.machine.display.width) col = this.machine.display.width-1;
    if (row < 0) row = 0;
    if (row >= this.machine.display.height) row = this.machine.display.height-1;
    this.machine.display.setColumn(col);
    this.machine.display.setRow(row);
}

function subGetPos()
// GOSUB 120
{
    this.variables.assign(this.machine.display.col, "HO", []);
    this.variables.assign(this.machine.display.row, "VE", []);
}

function subWriteBold()
// GOSUB 150
{
    this.machine.display.write(" ");
    var fg = this.machine.display.foreground;
    var bg = this.machine.display.background;
    subSetColour.call(this);
    var text = "  " + this.variables.retrieve("SR$", []) + "  ";
    this.machine.display.invertColour();
    this.machine.display.write(text);
    this.machine.display.invertColour();
    this.machine.display.foreground = fg;
    this.machine.display.background = bg;
    this.machine.display.write(" ");
}

function subReadKey()
// GOSUB 200, GOSUB 210 (after wait)
{
    // GOSUB 200 should hold only capitals in IN$ and IN
    var keyval = this.machine.keyboard.readKey();
    var key = "";
    // set IN$ for printables, DEL and arrow keys
    if ((keyval >= 28 && keyval <= 127) || keyval === 13) {
        key = String.fromCharCode(keyval);
        keyval = key.toUpperCase().charCodeAt(0);
    }
    else if (keyval) {
        key = "\0";
    }
    // IN$ and IN return capitalised key codes
    // special keys generate a code in IN but not IN$
    this.variables.assign(keyval, "IN", []);
    this.variables.assign(key, "IN$", []);
}

function subSetTimer()
// GOSUB 450 (with subReadKeyGetTimer)
{
    var deciseconds = this.variables.retrieve("SD", []);
    this.machine.timer.set(deciseconds * 100);
}

function subReadKeyGetTimer()
// GOSUB 450 (with subSetTimer)
// Wait SD*0.1 seconds or for a key stroke
// When ended: IN$ and IN contain the possible keystroke (see for special codes line 200).
// SD contains the remaining time from the moment the key was pressed or zero (if no key was pressed)
{
    subReadKey.apply(this);
    var milliseconds = this.machine.timer.remaining();
    this.variables.assign(milliseconds/100, "SD", []);
}

function subReadChar()
// GOSUB 220
{
    var col = this.variables.retrieve("HO", []);
    var row = this.variables.retrieve("VE", []);
    if (row<0 || col<0 || row>=this.height || col >= this.width) return;
    var ch = this.machine.display.getScreenChar(row, col);
    this.variables.assign(ch.toUpperCase().charCodeAt(0), "IN", []);
    // BASICODE-3C should set CN to zero here (or maybe 32 for a lowercase letter)
    // which we omit to avoid breaking BASICODE-3 compatibility
}

function subBeep()
// GOSUB 250
{
    this.machine.speaker.sound(440, 0.1, 1);
}

function subTone()
// GOSUB 400
//400 Produce a tone using SP, SD and SV
//    SP is frequency level: 0 = lowest, 60="central C", 127 = highest
//    SD is the tone duration in steps of 0.1 seconds
//    SV is the volume: 0=muted 7=medium, 15=loud
//    This subroutine keeps running during the time of SD.
{
    var freq = this.variables.retrieve("SP", []);
    var dur = this.variables.retrieve("SD", []);
    var vol = this.variables.retrieve("SV", []);
    freq = (freq===0)?0: Math.exp(freq*0.057762 + 2.10125);
    this.machine.speaker.sound(freq, dur*0.1, vol/15.0);
}

function subRandom()
// GOSUB 260
{
    this.variables.assign(Math.random(), "RV", []);
}

function subFree()
// GOSUB 270
{
    // theoretically, we should garbage-collect and return free memory
    // but let's just return some largeish (for BASICODE) number of bytes
    this.variables.assign(65536, "FR", []);
}

function subToggleBreak()
// GOSUB 280
// 280 Disable (FR=1) or enable (FR=0) the stop/break key.
{
    var disable = this.variables.retrieve("FR", []);
    this.machine.keyboard.suppress_break = (disable !== 0);
}

function subNumberToString()
// GOSUB 300
{
    var num = this.variables.retrieve("SR", []);
    this.variables.assign(num.toString(10), "SR$", []);
}

function subNumberFormat()
// GOSUB 310
// 310 Convert number SR to string with a string length of CT and with CN places after decimal point; returned in SR$,
{
    var num = this.variables.retrieve("SR", []);
    var len = this.variables.retrieve("CT", []);
    var decimals = this.variables.retrieve("CN", []);
    var str = num.toFixed(decimals);
    if (str.length > len) {
        // too long; replace with stars
        str = "*".repeat(len);
    }
    else if (str.length < len) {
        // left-pad with spaces
        str = " ".repeat(len-str.length) + str;
    }
    this.variables.assign(str, "SR$", []);
}

function subToUpperCase()
// GOSUB 330
// 330 Convert all letters in SR$ to capital letters
{
    var str = this.variables.retrieve("SR$", []);
    this.variables.assign(str.toUpperCase(), "SR$", []);
}

function subLinePrint()
// GOSUB 350
// 350 Print SR$ on the printer.
{
    var text = this.variables.retrieve("SR$", []);
    this.machine.printer.write(text);
}

function subLineFeed()
// GOSUB 360
// 360 Carriage return and line feed on the printer.
{
    this.machine.printer.write("\n");
}

function subOpen()
// GOSUB 500
/*
    Open the file NF$ according to the code in NF:
    NF = even number: input: NF= uneven number: output
    NF= 0 or 1 BASICODE cassette
    NF= 2 or 3 floppy, 1st file
    NF= 4 or 5 floppy, 2nd file
    NF= 6 or 7 floppy, 3rd file
    IN=0: all OK, IN=1: end of file, IN=-1: error
*/
{
    var nf = this.variables.retrieve("NF", []);
    var name = this.variables.retrieve("NF$", []);
    var mode = (nf%2) ? "w" : "r";
    var file_number = Math.floor(nf/2);
    var status = this.machine.storage[file_number].open(name, mode) ? 0 : -1;
    this.variables.assign(status, "IN", []);
}

function subClose()
// GOSUB 540
// Read into IN$ from the opened file NF$ (in IN the status, see line 500)
{
    var nf = this.variables.retrieve("NF", []);
    var file_number = Math.floor(nf/2);
    var status = this.machine.storage[file_number].close() ? 0 : -1;
    this.variables.assign(status, "IN", []);
}

function subReadFile()
// GOSUB 560
// Send SR$ towards the opened file NF$ (in IN the status, see line 500)
{
    var nf = this.variables.retrieve("NF", []);
    var file_number = Math.floor(nf/2);
    var status = 0;
    var str = "";
    try {
        str = this.machine.storage[file_number].readLine();
        if (str === null) {
            status = 1;
            str = "";
        }
    }
    catch (e) {
        if (typeof e !== "string") throw e;
        status = -1;
    }
    this.variables.assign(status, "IN", []);
    this.variables.assign(str, "IN$", []);
}

function subWriteFile()
// GOSUB 580
// Close the file with code NF
{
    var nf = this.variables.retrieve("NF", []);
    var file_number = Math.floor(nf/2);
    var status = 0;
    var str = this.variables.retrieve("SR$", []);
    try {
        this.machine.storage[file_number].writeLine(str);
    }
    catch (e) {
        if (typeof e !== "string") throw e;
        status = -1;
    }
    this.variables.assign(status, "IN", []);
}

function subPlot()
// GOSUB 620
// Plot a point at graphic position HO,VE (0<=HO<1 en 0<=VE<1) in fore/background color CN (=0/1; normally white/black)
{
    // only set foreground colour, backround is set on CLS
    var fg = this.variables.retrieve("CC", [0]);
    this.machine.display.foreground = this.machine.display.colours[fg];
    var x = this.variables.retrieve("HO", []);
    var y = this.variables.retrieve("VE", []);
    var c = this.variables.retrieve("CN", []);
    this.machine.display.plot(x, y, c);
}

function subDraw()
// GOSUB 630
// Draw a line towards point HO,VE (0<=HO<1 en 0<=VE<1) in fore/background color CN (=0/1; normally white/black)
{
    // only set foreground colour, backround is set on CLS
    var fg = this.variables.retrieve("CC", [0]);
    this.machine.display.foreground = this.machine.display.colours[fg];
    var x = this.variables.retrieve("HO", []);
    var y = this.variables.retrieve("VE", []);
    var c = this.variables.retrieve("CN", []);
    this.machine.display.draw(x, y, c);
}

function subText()
// GOSUB 650
// Print SR$ as text from graphic position HO,VE (0<=HO<1 en 0<=VE<1). HO and VE stay the same value.
{
    // only set foreground colour, backround is set on CLS
    var fg = this.variables.retrieve("CC", [0]);
    this.machine.display.foreground = this.machine.display.colours[fg];
    var x = this.variables.retrieve("HO", []);
    var y = this.variables.retrieve("VE", []);
    var text = this.variables.retrieve("SR$", []);
    var c = this.variables.retrieve("CN", []);
    this.machine.display.drawText(x, y, c, text);
}

function subSetColour()
{
    var fg = this.variables.retrieve("CC", [0]);
    var bg = this.variables.retrieve("CC", [1]);
    this.machine.display.foreground = this.machine.display.colours[fg];
    this.machine.display.background = this.machine.display.colours[bg];
}


///////////////////////////////////////////////////////////////////////////////
// screen

var SCALE = 4;

function Display(output_element, columns, rows, font_name, colours)
{
    // only allow one program to connect at a time
    this.busy = false;

    this.width = columns;
    this.height = rows;

    // set the colour palette
    this.colours = colours;
    this.foreground = this.colours[7];
    this.background = this.colours[0];

    // number of ticks in a cursor cycle
    this.cursor_ticks = 640/IDLE_DELAY;

    // resize the canvas to fit the font size
    var context = output_element.getContext("2d");
    var font_height = 8;
    var font_width = 8;

    var glyphs = null;
    if (font_name === "smooth") {
        context.font = font_height*SCALE + "px monospace";
        var measures = context.measureText("M");
        font_width = Math.round(measures.width / SCALE);
    }
    else {
        glyphs = buildFont(font_name);
        font_height = FONTS[font_name].height;
        font_width = FONTS[font_name].width;
    }

    this.pixel_width = font_width * this.width;
    this.pixel_height = font_height*this.height;
    output_element.width = SCALE * this.pixel_width;
    output_element.height = SCALE * this.pixel_height;

    // set the context on the resized canvas
    context = output_element.getContext("2d");
    context.font = "normal lighter "+font_height*SCALE+"px monospace";


    this.acquire = function(do_run)
    // acquire this interface, after the previous user released it
    {
        this.busy = true;
    };

    this.release = function()
    // release this interface
    {
        this.busy = false;
        this.resetColours();
    };

    this.resetColours = function()
    {
        this.foreground = this.colours[7];
        this.background = this.colours[0];
    };

    ///////////////////////////////////////////////////////////////////////////
    // primitives

    this.putPixel = function(x, y, c) {
        x = Math.round(x);
        y = Math.round(y);
        context.fillStyle = (c===0) ? this.foreground : this.background;
        context.fillRect(x*SCALE, y*SCALE, SCALE, SCALE);
    };

    this.clearText = function(x, y, output)
    // x,y are (approximate) top left corner of text box, not baseline
    {
        context.fillStyle = this.background;
        x = Math.round(x);
        y = Math.round(y);
        context.fillRect(x*SCALE, y*SCALE, output.length*font_width*SCALE, font_height*SCALE);
    };

    this.putText = function(x, y, c, output)
    // x,y are (approximate) top left corner of text box, not baseline
    {
        x = Math.round(x);
        y = Math.round(y);
        if (font_name !== "smooth") {
            for (var k=0; k < output.length; ++k) {
                var glyph = glyphs[output[k]];
                if (glyph) {
                    for (var i=0; i < glyph.length; ++i) {
                        for (var j=0; j < glyph[i].length; ++j) {
                            if (glyph[i][j]) this.putPixel(x+k*font_width+j, y+i, c);
                        }
                    }
                }
                else {
                    if (output[k]) console.log("Undefined character with code point "+ output[k].charCodeAt(0));
                }
            }
        }
        else {
            context.fillStyle = (c===0) ? this.foreground : this.background;
            // 0.75 seems about the right baseline offset for Chrome & Firefox...
            context.fillText(output, x*SCALE, (y+0.75*font_height)*SCALE);
        }
    };

    this.line = function(x0, y0, x1, y1, c)
    {
        x0 = Math.round(x0);
        y0 = Math.round(y0);
        x1 = Math.round(x1);
        y1 = Math.round(y1);

        // Bresenham algorithm
        var dx = Math.abs(x1-x0);
        var dy = Math.abs(y1-y0);
        var steep = dy > dx;
        if (steep) {
            var tmp = x0;
            x0 = y0;
            y0 = tmp;
            tmp = x1;
            x1 = y1;
            y1 = tmp;
            tmp = dx;
            dx = dy;
            dy = tmp;
        }
        var sx = (x1 > x0) ? 1 : -1;
        var sy = (y1 > y0) ? 1 : -1;
        var line_error = Math.trunc(dx / 2);
        var ry = y0;
        for (var rx = x0; rx*sx <= x1*sx; rx += sx) {
            if (steep) this.putPixel(ry, rx, c);
            else this.putPixel(rx, ry, c);
            line_error -= dy;
            if (line_error < 0) {
                ry += sy;
                line_error += dx;
            }
        }
    };

    var cursor_now = 0;
    this.cursor = function()
    {
        cursor_now = (++cursor_now) % this.cursor_ticks;
        if (cursor_now > this.cursor_ticks/2) {
            context.fillStyle = this.foreground;
        }
        else {
            context.fillStyle = this.background;
        }
        context.fillRect(this.col*font_width*SCALE, this.row*font_height*SCALE,
            font_width*SCALE, font_height*SCALE);
    };

    this.clear = function()
    {
        context.fillStyle = this.background;
        context.fillRect(0, 0, output_element.width, output_element.height);
        this.row = 0;
        this.col = 0;
        this.content = (" ".repeat(this.width)+"\n").repeat(this.height).split("\n");
        //graphics
        this.last_x = 0;
        this.last_y = 0;
    };

    this.clearRow = function(row)
    {
        context.fillStyle = this.background;
        context.fillRect(0, row*font_height*SCALE, output_element.width, font_height*SCALE);
        this.content[row] = " ".repeat(this.width);
    };

    this.scroll = function()
    {
        context.drawImage(output_element,
            0, font_height*SCALE, output_element.width, output_element.height-font_height*SCALE,
            0, 0, output_element.width, output_element.height-font_height*SCALE);
        context.fillStyle = this.background;
        context.fillRect(0, output_element.height-font_height*SCALE, output_element.width, font_height*SCALE);
        this.content = this.content.slice(1).concat(" ".repeat(this.width));
    };


    ///////////////////////////////////////////////////////////////////////////
    // text

    this.write = function(output)
    {
        var lines = output.toString().split(/\r?\n/);
        var i=1;
        this.writeRaw(lines[0]);
        for (; i < lines.length; ++i) {
            this.lineFeed();
            this.writeRaw(lines[i]);
        }
    };

    this.checkPos = function()
    {
        if (this.col >= this.width) {
            this.col = 0;
            ++this.row;
        }
        if (this.row >= this.height) {
            this.scroll();
            this.row = this.height-1;
        }
    };

    this.writeRaw = function(output)
    {
        if ((this.row >= this.height) || (this.row<0)) return;

        for (var i=0; i < output.length; ++i) {
            // DEL
            if (output.charCodeAt(i) === 127) {
                // put a space to clear the cursor
                this.putChar(" ");
                --this.col;
                this.checkPos();
                this.putChar(" ");
            }
            // LEFT
            else if (output.charCodeAt(i) === 28) {
                --this.col;
                this.checkPos();
            }
            // RIGHT
            else if (output.charCodeAt(i) === 29) {
                ++this.col;
                this.checkPos();
            }
            // DOWN
            else if (output.charCodeAt(i) === 30) {
                ++this.row;
                this.checkPos();
            }
            // UP
            else if (output.charCodeAt(i) === 31) {
                --this.row;
                this.checkPos();
            }
            else if (output.charCodeAt(i) >= 32 && output.charCodeAt(i) < 127) {
                this.putChar(output[i]);
                ++this.col;
                this.checkPos();
            }
        }
    };

    this.putChar = function(char)
    {
        this.clearText(this.col*font_width, this.row*font_height, char);
        this.putText(this.col*font_width, this.row*font_height, 0, char);
        // update content buffer
        this.content[this.row] = this.content[this.row].slice(0, this.col) + char + this.content[this.row].slice(this.col+1);
    };

    this.writeCentre = function(row, str)
    // write centred; used by the loader only
    {
        this.setColumn((this.width - str.length)/2);
        this.setRow(row);
        this.write(str);
    };

    this.getScreenChar = function(row, col)
    {
        row = Math.round(row);
        col = Math.round(col);
        if (row<0 || col<0 || row>=this.height || col >= this.width) return " ";
        return this.content[row].slice(col, col+1);
    };

    this.invertColour = function()
    {
        var buf = this.foreground;
        this.foreground = this.background;
        this.background = buf;
    };

    this.setColumn = function(col)
    {
        this.col = col;
        if (this.col >= this.width) this.lineFeed();
    };

    this.lineFeed = function()
    {
        ++this.row;
        this.col = 0;
        if (this.row >= this.height) {
            this.scroll();
            this.row = this.height-1;
        }
    };

    this.setRow = function(row)
    {
        this.row = row;
        if (this.row >= this.height) {
            this.scroll();
            this.row = this.height-1;
        }
    };

    ///////////////////////////////////////////////////////////////////////////
    // graphics

    this.plot = function(x, y, c)
    {
        this.last_x = Math.trunc(x * this.pixel_width);
        this.last_y = Math.trunc(y * this.pixel_height);
        this.putPixel(this.last_x, this.last_y, c);
    };

    this.draw = function(x, y, c)
    {
        var next_x = Math.trunc(x * this.pixel_width);
        var next_y = Math.trunc(y * this.pixel_height);
        this.line(this.last_x, this.last_y, next_x, next_y, c);
        this.last_x = next_x;
        this.last_y = next_y;
    };

    this.drawText = function(x, y, c, text)
    {
        var pixel_x = Math.trunc(x * this.pixel_width);
        var pixel_y = Math.trunc(y * this.pixel_height);
        this.putText(pixel_x, pixel_y, c, text);
    };

    // initialise
    this.resetColours();
    this.clear();
}


///////////////////////////////////////////////////////////////////////////////
// keyboard

function Keyboard(input_element)
{
    // JavaScript to BASICODE keycode dictionary
    var KEYS = {
        8: 127, // backspace
        13: 13, // enter
        37: 28, // left
        38: 31, // up
        39: 29, // right
        40: 30, // down
        112: -1, // F1
        113: -2, // F2
        114: -3, // F3
        115: -4, // F4
        116: -5, // F5
        117: -6, // F6
        118: -7, // F7
        119: -8, // F8
        120: -9, // F9
        121: -10, // F10
        122: -11, // F11
        123: -12, // F12
    };
    // we'll use -255 as Break - not used in BASICODE

    var self = this;

    input_element.addEventListener("keydown", function(event) {
        // use this for backspace, function keys
        if (event.keyCode === 19 && event.ctrlKey && !self.suppress_break) {
            self.break_flag = true;
        }
        if (event.keyCode in KEYS) {
            self.buffer.push(KEYS[event.keyCode]);
            // preventDefault will stop all keys from being caught by keypress, so use only for backspace and function keys to avoid browser actions
            event.preventDefault();
        }
    });

    input_element.addEventListener("keypress", function(event) {
        self.buffer.push(event.charCode);
        event.preventDefault();
    });

    // Break key combination has been pressed
    this.break_flag = false;

    this.reset = function()
    {
        this.buffer = [];
        // suppress ctrl+break key
        this.suppress_break = false;
        // break has been pressed
        this.break_flag = false;
        // interactive line buffer
        this.line_buffer = "";
    };

    this.keyPressed = function() {
        return self.buffer.length > 0;
    };

    this.readKey = function()
    {
        if (!this.buffer.length) return 0;
        return this.buffer.shift();
    };

    this.insertKey = function(keycode) {
        // we'll use -255 as Break - not used in BASICODE
        if (keycode === -255) {
            if (!this.suppress_break) this.break_flag = true;
        }
        else {
            this.buffer.push(keycode);
        }
    }

    // INPUT support

    this.interact = function(output, comma)
    {
        output.cursor();
        var loc = this.buffer.indexOf(13);
        if (comma) {
            var comma_loc = this.buffer.indexOf(44);
            if (loc === -1) loc = comma_loc;
            if (comma_loc !== -1) loc = Math.min(loc, comma_loc);
        }
        var new_chars = [];
        if (loc === -1) {
            new_chars = this.buffer.slice();
            this.buffer = [];
        }
        else {
            new_chars = this.buffer.slice(0, loc);
            // leave the CR out of the buffer
            this.buffer = this.buffer.slice(loc+1);
        }
        var new_str = String.fromCharCode.apply(null, new_chars);
        this.line_buffer += new_str;
        output.write(new_str);
        // echo the newline, but don"t return it
        if (loc !== -1) {
            if (comma) output.write(",");
            // also echo a space to remove the cursor (this is a bit of a hack);
            else output.write(" \n");
        }
        // trigger value is true if CR has been found
        return (loc !== -1);
    };

    this.readLine = function()
    {
        var line = this.line_buffer;
        this.line_buffer = "";
        // handle backspaces
        for (var i=0; i < line.length;) {
            if (line.charCodeAt(i) === 127) {
                line = line.slice(0, i-1) + line.slice(i+1);
                --i;
            }
            else if (line.charCodeAt(i) < 32 || line.charCodeAt(i) > 126) {
                line = line.slice(0, i) + line.slice(i+1);
            }
            else ++i;
        }
        return line;
    };

    this.reset();
}


///////////////////////////////////////////////////////////////////////////////
// printer

function Printer(parent) {

    // create hidden iframe for printing
    var print_iframe = document.createElement("iframe");
    print_iframe.hidden = true;
    document.body.appendChild(print_iframe);

    var print_element = document.createElement("pre");
    print_iframe.contentDocument.body.appendChild(print_element);

    this.write = function(text)
    // add text to the print document
    {
        print_element.textContent += text.split(/\r?\n/).join("\n");
        parent.on_print(print_element.textContent);
    };

    this.print = function()
    // send the document (if any) to the printer
    {
        if (print_element.textContent) {
            print_iframe.contentWindow.print();
        }
    }

    this.clear = function()
    // clear the print buffer
    {
        print_element.textContent = "";
        parent.on_print(print_element.textContent);
    }
}


///////////////////////////////////////////////////////////////////////////////
// speaker

// create only a single global audiocontext
// as they are a limited resource that can't be destroyed
var AUDIO = null;
try {
    var AUDIO = AudioContext ? new AudioContext() : null;
} catch (e) {
    // NotSupportedError if too many contexts opened on one page
    if (e instanceof DOMException) console.log(e);
    else throw e;
}

function Speaker()
// tone generator
{
    this.tones = 0;

    this.isBusy = function()
    {
        return (this.tones > 0);
    };

    this.sound = function(frequency, duration, volume)
    // play a sound at frequency (Hz) and volume (0--1) for duration (s)
    // caller should check we"re not busy first, otherwise first oscillator to stop
    // will unset the busy flag
    {
        if (!AUDIO) return;
        // Oscillator node
        var oscillator = AUDIO.createOscillator();
        oscillator.type = "square";
        oscillator.frequency.value = frequency;

        // Gain node
        var gain = AUDIO.createGain();
        gain.gain.value = volume;

        // link nodes up
        oscillator.connect(gain);
        gain.connect(AUDIO.destination);

        // play the tone
        ++this.tones;
        var now = AUDIO.currentTime;
        oscillator.start(now);
        oscillator.stop(now + duration);

        // clean up afterwards
        var speaker = this;
        oscillator.onended = function() {
            // this event seems to be missed by Chromium, occasionally
            --speaker.tones;
            oscillator.disconnect();
            gain.disconnect();
        };
    };
}


///////////////////////////////////////////////////////////////////////////////
// time

function Timer()
{
    var start = null;
    this.duration = 0;

    this.set = function(duration)
    {
        start = new Date();
        this.duration = duration;
    };

    this.clear = function()
    {
        start = null;
        this.duration = 0;
    };

    this.elapsed = function() {
        if (start === null) return true;
        return (new Date() - start) > this.duration;
    };

    this.remaining = function() {
        if (start === null) return 0;
        var remaining = this.duration - (new Date() - start);
        return (remaining<0) ? 0 : remaining;
    };
}


///////////////////////////////////////////////////////////////////////////////
// storage

function Floppy(id, parent)
{

    this.id = id;
    this.open_file = null;
    this.open_key = null;
    this.open_mode = "";
    this.open_line = null;
    this.parent = parent;

    var prefix = "BASICODE";

    this.open = function(name, mode)
    {
        this.open_key = [prefix, this.id, name].join(":");
        var string = localStorage.getItem(this.open_key);
        this.open_mode = mode;
        this.open_line = 0;
        if (string === undefined || string === null) {
            if (this.open_mode === "r") {
                this.open_file = null;
                this.open_key = null;
                this.open_mode = "";
                return false;
            }
            else {
                this.open_file = [];
            }
        }
        else {
            this.open_file = string.split("\n");
        }
        return true;
    };

    this.close = function()
    {
        if (this.open_key === null) return false;
        localStorage.setItem(this.open_key, this.open_file.join("\n"));
        this.open_file = null;
        this.parent.on_file_store();
        return true;
    };

    this.readLine = function()
    {
        if (this.open_mode !== "r") throw "File not open for read";
        if (this.open_line >= this.open_file.length) return null;
        return this.open_file[this.open_line++];
    };

    this.writeLine = function(line)
    {
        if (this.open_mode !== "w") throw "File not open for write";
        this.open_file.push(line);
    };

    this.delete = function(name)
    {
        localStorage.removeItem([prefix, this.id, name].join(":"));
        this.parent.on_file_store();
    };
}


function Tape(id, parent)
{
    this.id = id;
    this.open_file = null;
    this.open_key = null;
    this.open_mode = "";
    this.open_line = null;
    this.parent = parent;

    this.pos = 0;

    var prefix = "BASICODE";

    this.open = function(dummy, mode)
    {
        if (mode === "r") {
            // always read the next available file
            this.pos += 1;
        }
        else {
            // always write at the end of the tape
            var existing;
            do {
                this.pos += 1;
                existing = localStorage.getItem([prefix, this.id, this.pos].join(":"));
            }
            while (existing !== undefined && existing !== null);
        }
        this.open_key = [prefix, this.id, this.pos].join(":");
        var string = localStorage.getItem(this.open_key);
        this.open_mode = mode;
        this.open_line = 0;
        if (string === undefined || string === null) {
            if (this.open_mode === "r") {
                this.open_file = null;
                this.open_key = null;
                this.open_mode = "";
                // no more files; turn the tape
                this.pos = 0;
                return false;
            }
            else {
                this.open_file = [];
            }
        }
        else {
            this.open_file = string.split("\n");
        }
        return true;
    };

    this.close = function()
    {
        if (this.open_key === null) return false;
        localStorage.setItem(this.open_key, this.open_file.join("\n"));
        this.open_file = null;
        this.parent.on_file_store();
        return true;
    };

    this.readLine = function()
    {
        if (this.open_mode !== "r") throw "File not open for read";
        if (this.open_line >= this.open_file.length) return null;
        return this.open_file[this.open_line++];
    };

    this.writeLine = function(line)
    {
        if (this.open_mode !== "w") throw "File not open for write";
        this.open_file.push(line);
    };

    this.delete = function(name)
    {
        localStorage.removeItem([prefix, this.id, name].join(":"));
        this.parent.on_file_store();
    };
}


///////////////////////////////////////////////////////////////////////////////
// emulated machine

var busy_delay = 1;
var IDLE_DELAY = 60;
// minimum delay (nested delays are "clamped" by the browser)
var MIN_DELAY = 4;


function BasicodeApp(id, element, settings)
{
    this.id = id;
    this.canvas = element;
    var app = this;

    // runtime members
    this.program = null;
    this.running = null;

    // event functions
    this.on_program_load = function(){};
    this.on_file_store = function(){};
    this.on_program_run = function(){};
    this.on_program_end = function(){};
    this.on_print = function(){};

    this.reset = function()
    {
        // speed setting is (roughly) the number of empty loop cycles per second
        if (settings.speed) busy_delay = 1000 / settings.speed;
        // screen settings
        var columns = settings.columns || 40;
        var rows = settings.rows || 24;
        var font_name = settings.font || "smooth";
        // palette settings, use CGA colours by default
        var colours = {
            0: "black",
            1: "#0000aa", // blue
            2: "#aa0000", // red
            3: "#aa00aa", // purple
            4: "#00aa00", // green
            5: "#00aaaa", // cyan
            6: "#ffff55", // yellow
            7: "white",
        };
        for (var i=0; i<8; ++i) colours[i] = settings["color-" + i] || colours[i];

        // detach any previous program
        this.end();

        // set up emulator
        this.display = new Display(element, columns, rows, font_name, colours);
        this.keyboard = new Keyboard(element);
        this.printer = new Printer(this);
        this.speaker = new Speaker();
        this.timer = new Timer();
        var floppy = new Floppy("floppy", this);
        this.storage = [new Tape("tape", this), floppy, floppy, floppy];

        // load program from storage, if needed
        if (!this.program) this.load(localStorage.getItem(["BASICODE", this.id, "program"].join(":")));
        if (this.program) {
            element.focus();
        }
    };

    this.handleError = function(e)
    {
        this.end();
        this.display.write("\n");
        this.display.invertColour();
        if (e instanceof BasicError) {
            this.display.write(e.message);
            var ln = e.where;
            if ((ln === undefined || ln === null) && this.program !== null) ln = this.program.current_line;
            this.display.write(" in "+ ln);
            this.display.invertColour();
            this.display.write("\n");
            if (e.detail) {
                this.display.write(e.detail);
            }
        }
        else {
            this.display.write("EXCEPTION");
            this.display.invertColour();
            this.display.write("\n");
            this.display.write(e);
            console.log(e.stack);
            throw e;
        }
    };

    this.load = function(code)
    // load program, parse to AST, connect to output
    {
        if (!code || !code.trim()) {
            code = "";
        }
        // stop any running program
        this.end();
        // clear screen
        this.display.clear();
        // reset keyboard buffer
        this.keyboard.reset();
        // put code in persistent storage
        localStorage.setItem(["BASICODE", this.id, "program"].join(":"), code);
        if (code) {
            // initialise program object
            this.program = new Program(this, code);
        } else {
            this.program = null;
        }
        // call on_program_load function
        this.on_program_load(this.program);
        this.run();
    };

    this.run = function()
    // execute the program
    {
        if (this.running) this.end();

        // exit if nothing loaded
        if (!this.program || this.program.tree === null) return;
        // handle parse rrors
        if (this.program.error) {
            this.handleError(this.program.error);
            return;
        }

        // clear screen
        this.display.clear();
        // reset keyboard buffer
        this.keyboard.reset();
        // reset program state
        this.program.clear();

        var current = this.program.tree;
        var delay = 0;

        function step() {
            try {
                while (true) {
                    if (current instanceof Label && typeof current.label === "number") {
                        app.program.current_line = current.label;
                    }
                    if (current.delay) delay += current.delay;
                    current = current.step();
                    if (!current) {
                        app.end();
                        break;
                    }
                    if (app.keyboard.break_flag) throw new BasicError("Break", "");
                    if (current && (delay >= MIN_DELAY)) {
                        app.running = window.setTimeout(step, delay);
                        delay = 0;
                        break;
                    }
                }
            } catch (e) {
                app.handleError(e);
            }
        }
        // get started
        this.running = window.setTimeout(step, MIN_DELAY);
        element.focus();
        this.on_program_run();
    };

    this.stop = function()
    // interrupt program
    {
        this.handleError(new BasicError("Break", ""));
    };

    this.end = function()
    // stop program and release resources
    {
        if (this.running) window.clearTimeout(this.running);
        this.running = null;
        if (this.program) {
            this.display.release();
        }
        this.on_program_end();
    };

    this.store = function(drive, name, text)
    // store a file
    {
        if (drive === "tape") drive = 0;
        if (drive === "floppy") drive = 1;
        var floppy = this.storage[drive];
        floppy.open(name, "w");
        floppy.writeLine(text.replace(/(\r\n|\n|\r)/gm, "\n"));
        floppy.close();
    };

    this.delete = function(drive, name)
    // delete a file
    {
        if (drive === "tape") drive = 0;
        if (drive === "floppy") drive = 1;
        var floppy = this.storage[drive];
        floppy.delete(name);
    };

    this.pressKey = function(keycode)
    // insert a keycode into keyboard buffer
    {
        this.keyboard.insertKey(keycode);
    }

    this.printOutput = function()
    // send print output to printer
    {
        this.printer.print();
    }

    this.clearOutput = function()
    // clear print output
    {
        this.printer.clear();
    }

    ///////////////////////////////////////////////////////////////////////////
    // first initialisation

    this.reset();
}


///////////////////////////////////////////////////////////////////////////////
// initial setup

var apps = {};

function createCanvas(script)
{
    // create a canvas to work on
    var element = document.createElement("canvas");
    element.className = "basicode";
    element.innerHTML = "To use this interpreter, you need a browser that supports the CANVAS element.";
    script.parentNode.insertBefore(element, script);
    // make canvas element focussable to catch keypresses
    element.tabIndex = 1;
    element.focus();
    return element;
}

function initProgram(script)
{
    var app = apps[script.id];
    // load & run the code provided in the element, if any
    var url = script.getAttribute("src");
    if (url !== undefined && url !== null && url) {
        var request = new XMLHttpRequest();
        request.open("GET", url, true);
        request.onreadystatechange = function() {
            if (request.readyState === 4 && request.status === 200) {
                code = request.responseText;
                // need to explicitly load here as this is called asynchronously
                app.load(code);
            }
        };
        request.send(null);
    }
    else {
        var code = script.innerHTML.trim();
        if (code) app.load(code);
    }
}

function launch() {
    var scripts = document.getElementsByTagName("script");
    for (var i=0; i < scripts.length; ++i) {
        var script = scripts[i];
        if (script.type == "text/basicode") {
            var element = createCanvas(script);
            apps[script.id] = new BasicodeApp(script.id, element, script.dataset);
            initProgram(script);
        }
    }
}


///////////////////////////////////////////////////////////////////////////////

// a bit of magic to run launch() after the document is complete
// so that it can access all the <script> tags
// http://stackoverflow.com/questions/807878/javascript-that-executes-after-page-load
function downloadJSAtOnload() {
    var element = document.createElement("script");
    element.innerHTML = "launch();";
    document.body.appendChild(element);
}
if (window.addEventListener) {
    window.addEventListener("load", downloadJSAtOnload, false);
}
else if (window.attachEvent) {
    window.attachEvent("onload", downloadJSAtOnload);
}
else {
    window.onload = downloadJSAtOnload;
}
